
The following items are not documented:

class CompositePublisher # is documented

  # in file lib/rake/contrib/publisher.rb:19
  def self.new(); end

end

class DEBUGGER__ # is documented

  # in file lib/debug.rb:968
  def self.context(thread=Thread.current); end

  # in file lib/debug.rb:1024
  def self.debug_thread_info(input, binding); end

  # in file lib/debug.rb:980
  def self.get_thread(num); end

  # in file lib/debug.rb:976
  def self.interrupt(); end

  # in file lib/debug.rb:1011
  def self.make_thread_list(); end

  # in file lib/debug.rb:952
  def self.resume(); end

  # in file lib/debug.rb:936
  def self.set_last_thread(th); end

  # in file lib/debug.rb:926
  def self.set_trace( arg ); end

  # in file lib/debug.rb:940
  def self.suspend(); end

  # in file lib/debug.rb:989
  def self.thread_list(num); end

  # in file lib/debug.rb:1005
  def self.thread_list_all(); end

end

# in files:
#   lib/debug.rb

module DEBUGGER__::RubyVM
end

# in files:
#   lib/debug.rb

module DEBUGGER__::Thread
end

class DRb::ExtServ # is documented

  attr_reader :server # in file lib/drb/extserv.rb:23
  # in file lib/drb/extserv.rb:14
  def self.new(there, name, server=nil); end

  # in file lib/drb/extserv.rb:39
  def alive?(); end

  # in file lib/drb/extserv.rb:25
  def front(); end

  # in file lib/drb/extserv.rb:29
  def stop_service(); end

end

class DRb::ExtServManager # is documented

  attr_accessor :uri # in file lib/drb/extservm.rb:34
  # in file lib/drb/extservm.rb:17
  def self.command(); end

  # in file lib/drb/extservm.rb:21
  def self.command=(cmd); end

  # in file lib/drb/extservm.rb:25
  def self.new(); end

  # in file lib/drb/extservm.rb:47
  def regist(name, ro); end

  # in file lib/drb/extservm.rb:36
  def service(name); end

  # in file lib/drb/extservm.rb:55
  def unregist(name); end

end


module Exception2MessageMapper # is documented

  # in file lib/e2mmap.rb:153
  def self.e2mm_message(klass, exp); end

  # in file lib/e2mmap.rb:55
  def self.extend_object(cl); end

  # in file lib/e2mmap.rb
  def self.message(klass, exp); end

  # in file lib/e2mmap.rb:60
  def bind(cl); end

end

module FileUtils # is documented

  # in file lib/rake/file_utils.rb:86
  LN_SUPPORTED = nil
end



# in files:
#   lib/fileutils.rb

module FileUtils::Entry_::File
end


class GServer # is documented

  # in file lib/gserver.rb:85
  DEFAULT_HOST = nil
  # in file lib/gserver.rb:87
  def serve(io); end

end


class Gem::AvailableSet # is documented

  # in file lib/rubygems/available_set.rb:3
  Tuple = nil
  attr_reader :set # in file lib/rubygems/available_set.rb:10
  # in file lib/rubygems/available_set.rb:5
  def self.new(); end

  # in file lib/rubygems/available_set.rb:18
  def <<(o); end

  # in file lib/rubygems/available_set.rb:12
  def add(spec, source); end

  # in file lib/rubygems/available_set.rb:44
  def all_specs(); end

  # in file lib/rubygems/available_set.rb:40
  def empty?(); end

  # in file lib/rubygems/available_set.rb:91
  def inject_into_list(dep_list); end

  # in file lib/rubygems/available_set.rb:48
  def match_platform!(); end

  # in file lib/rubygems/available_set.rb:70
  def pick_best!(); end

  # in file lib/rubygems/available_set.rb:78
  def remove_installed!(dep); end

  # in file lib/rubygems/available_set.rb:61
  def size(); end

  # in file lib/rubygems/available_set.rb:54
  def sorted(); end

  # in file lib/rubygems/available_set.rb:65
  def source_for(spec); end

end

class Gem::Command # is documented

  # in file lib/rubygems/command.rb:62
  def self.add_common_option(*args, &handler); end

  # in file lib/rubygems/command.rb:54
  def self.build_args=(value); end

  # in file lib/rubygems/command.rb:58
  def self.common_options(); end

  # in file lib/rubygems/command.rb:66
  def self.extra_args(); end

  # in file lib/rubygems/command.rb:70
  def self.extra_args=(value); end

end


class Gem::CommandManager # is documented

  # in file lib/rubygems/command_manager.rb:174
  def find_command(cmd_name); end

  # in file lib/rubygems/command_manager.rb:187
  def find_command_possibilities(cmd_name); end

  # in file lib/rubygems/command_manager.rb:149
  def process_args(args, build_args=nil); end

end


class Gem::Commands::BuildCommand # is documented

  # in file lib/rubygems/commands/build_command.rb:6
  def self.new(); end

end

class Gem::Commands::CertCommand # is documented

  # in file lib/rubygems/commands/cert_command.rb:6
  def self.new(); end

  # in file lib/rubygems/commands/cert_command.rb:116
  def build(name); end

  # in file lib/rubygems/commands/cert_command.rb:129
  def certificates_matching(filter); end

  # in file lib/rubygems/commands/cert_command.rb:181
  def load_default_cert(); end

  # in file lib/rubygems/commands/cert_command.rb:197
  def load_default_key(); end

  # in file lib/rubygems/commands/cert_command.rb:213
  def sign(cert_file); end

end

class Gem::Commands::CheckCommand # is documented

  # in file lib/rubygems/commands/check_command.rb:10
  def self.new(); end

  # in file lib/rubygems/commands/check_command.rb:40
  def check_gems(); end

  # in file lib/rubygems/commands/check_command.rb:59
  def doctor(); end

end

class Gem::Commands::CleanupCommand # is documented

  # in file lib/rubygems/commands/cleanup_command.rb:7
  def self.new(); end

  # in file lib/rubygems/commands/cleanup_command.rb:76
  def clean_gems(); end

  # in file lib/rubygems/commands/cleanup_command.rb:98
  def get_candidate_gems(); end

  # in file lib/rubygems/commands/cleanup_command.rb:108
  def get_gems_to_cleanup(); end

  # in file lib/rubygems/commands/cleanup_command.rb:122
  def get_primary_gems(); end

  # in file lib/rubygems/commands/cleanup_command.rb:133
  def uninstall_dep(spec); end

end

class Gem::Commands::ContentsCommand # is documented

  # in file lib/rubygems/commands/contents_command.rb:9
  def self.new(); end

end

class Gem::Commands::DependencyCommand # is documented

  # in file lib/rubygems/commands/dependency_command.rb:10
  def self.new(); end

  # in file lib/rubygems/commands/dependency_command.rb:123
  def print_dependencies(spec, level = 0); end

end

class Gem::Commands::EnvironmentCommand # is documented

  # in file lib/rubygems/commands/environment_command.rb:5
  def self.new(); end

end

class Gem::Commands::FetchCommand # is documented

  # in file lib/rubygems/commands/fetch_command.rb:10
  def self.new(); end

end

class Gem::Commands::GenerateIndexCommand # is documented

  # in file lib/rubygems/commands/generate_index_command.rb:11
  def self.new(); end

end

class Gem::Commands::HelpCommand # is documented

  # in file lib/rubygems/commands/help_command.rb:81
  def self.new(); end

end

class Gem::Commands::InstallCommand # is documented

  # in file lib/rubygems/commands/install_command.rb:23
  def self.new(); end

  # in file lib/rubygems/commands/install_command.rb:112
  def install_from_gemdeps(gf); end

end

class Gem::Commands::ListCommand # is documented

  # in file lib/rubygems/commands/list_command.rb:10
  def self.new(name = 'list', summary = 'Display gems whose name starts with STRING'); end

end

class Gem::Commands::LockCommand # is documented

  # in file lib/rubygems/commands/lock_command.rb:5
  def self.new(); end

  # in file lib/rubygems/commands/lock_command.rb:60
  def complain(message); end

  # in file lib/rubygems/commands/lock_command.rb:101
  def spec_path(gem_full_name); end

end

class Gem::Commands::MirrorCommand # is documented

  # in file lib/rubygems/commands/mirror_command.rb:4
  def self.new(); end

end

class Gem::Commands::OutdatedCommand # is documented

  # in file lib/rubygems/commands/outdated_command.rb:11
  def self.new(); end

end

class Gem::Commands::OwnerCommand # is documented

  # in file lib/rubygems/commands/owner_command.rb:21
  def self.new(); end

  # in file lib/rubygems/commands/owner_command.rb:60
  def add_owners(name, owners); end

  # in file lib/rubygems/commands/owner_command.rb:68
  def manage_owners(method, name, owners); end

  # in file lib/rubygems/commands/owner_command.rb:64
  def remove_owners(name, owners); end

  # in file lib/rubygems/commands/owner_command.rb:45
  def show_owners(name); end

end

class Gem::Commands::PristineCommand # is documented

  # in file lib/rubygems/commands/pristine_command.rb:10
  def self.new(); end

end

class Gem::Commands::PushCommand # is documented

  # in file lib/rubygems/commands/push_command.rb:22
  def self.new(); end

  # in file lib/rubygems/commands/push_command.rb:43
  def send_gem(name); end

end

class Gem::Commands::QueryCommand # is documented

  # in file lib/rubygems/commands/query_command.rb:13
  def self.new(name = 'query', summary = 'Query gem information in local or remote repositories'); end

end

class Gem::Commands::RdocCommand # is documented

  # in file lib/rubygems/commands/rdoc_command.rb:9
  def self.new(); end

end

class Gem::Commands::SearchCommand # is documented

  # in file lib/rubygems/commands/search_command.rb:6
  def self.new(); end

end

class Gem::Commands::ServerCommand # is documented

  # in file lib/rubygems/commands/server_command.rb:6
  def self.new(); end

end

class Gem::Commands::SetupCommand # is documented

  # in file lib/rubygems/commands/setup_command.rb:8
  HISTORY_HEADER = nil
  # in file lib/rubygems/commands/setup_command.rb:9
  VERSION_MATCHER = nil
  # in file lib/rubygems/commands/setup_command.rb:11
  def self.new(); end

  # in file lib/rubygems/commands/setup_command.rb:82
  def check_ruby_version(); end

  # in file lib/rubygems/commands/setup_command.rb:352
  def generate_default_dirs(install_destdir); end

  # in file lib/rubygems/commands/setup_command.rb:224
  def install_executables(bin_dir); end

  # in file lib/rubygems/commands/setup_command.rb:282
  def install_lib(lib_dir); end

  # in file lib/rubygems/commands/setup_command.rb:298
  def install_rdoc(); end

  # in file lib/rubygems/commands/setup_command.rb:339
  def make_destination_dirs(install_destdir); end

  # in file lib/rubygems/commands/setup_command.rb:384
  def rb_files_in(dir); end

  # in file lib/rubygems/commands/setup_command.rb:390
  def remove_old_bin_files(bin_dir); end

  # in file lib/rubygems/commands/setup_command.rb:422
  def remove_old_lib_files(lib_dir); end

  # in file lib/rubygems/commands/setup_command.rb:439
  def uninstall_old_gemcutter(); end

end

class Gem::Commands::SourcesCommand # is documented

  # in file lib/rubygems/commands/sources_command.rb:10
  def self.new(); end

end

class Gem::Commands::SpecificationCommand # is documented

  # in file lib/rubygems/commands/specification_command.rb:11
  def self.new(); end

end

class Gem::Commands::StaleCommand # is documented

  # in file lib/rubygems/commands/stale_command.rb:4
  def self.new(); end

end

class Gem::Commands::UninstallCommand # is documented

  # in file lib/rubygems/commands/uninstall_command.rb:14
  def self.new(); end

end

class Gem::Commands::UnpackCommand # is documented

  # in file lib/rubygems/commands/unpack_command.rb:10
  def self.new(); end

end

class Gem::Commands::UpdateCommand # is documented

  # in file lib/rubygems/commands/update_command.rb:19
  def self.new(); end

  # in file lib/rubygems/commands/update_command.rb:88
  def update_gem(name, version = Gem::Requirement.default); end

  # in file lib/rubygems/commands/update_command.rb:109
  def update_gems(gems_to_update); end

  # in file lib/rubygems/commands/update_command.rb:191
  def which_to_update(highest_installed_gems, gem_names, system = false); end

end

class Gem::Commands::WhichCommand # is documented

  # in file lib/rubygems/commands/which_command.rb:4
  def self.new(); end

  # in file lib/rubygems/commands/which_command.rb:57
  def find_paths(package_name, dirs); end

  # in file lib/rubygems/commands/which_command.rb:73
  def gem_paths(spec); end

end

class Gem::Commands::YankCommand # is documented

  # in file lib/rubygems/commands/yank_command.rb:23
  def self.new(); end

  # in file lib/rubygems/commands/yank_command.rb:64
  def unyank_gem(version, platform, api_key); end

  # in file lib/rubygems/commands/yank_command.rb:59
  def yank_gem(version, platform, api_key); end

end

class Gem::ConfigFile # is documented

  # in file lib/rubygems/config_file.rb:40
  DEFAULT_BACKTRACE = nil
  # in file lib/rubygems/config_file.rb:41
  DEFAULT_BULK_THRESHOLD = nil
  # in file lib/rubygems/config_file.rb:42
  DEFAULT_VERBOSITY = nil
  # in file lib/rubygems/config_file.rb:43
  DEFAULT_UPDATE_SOURCES = nil
  # in file lib/rubygems/config_file.rb:88
  SYSTEM_WIDE_CONFIG_FILE = nil
  attr_reader :hash # in file lib/rubygems/config_file.rb:455
  # in file lib/rubygems/config_file.rb:266
  def load_api_keys(); end

  # in file lib/rubygems/config_file.rb:312
  def load_file(filename); end

end


class Gem::ConsoleUI # is documented

  # in file lib/rubygems/user_interaction.rb:541
  def self.new(); end

end


class Gem::DependencyInstaller # is documented

  # in file lib/rubygems/dependency_installer.rb:26
  DEFAULT_OPTIONS = nil
  attr_reader :gems_to_install # in file lib/rubygems/dependency_installer.rb:18
  attr_reader :installed_gems # in file lib/rubygems/dependency_installer.rb:19
  attr_reader :errors # in file lib/rubygems/dependency_installer.rb:101
  # in file lib/rubygems/dependency_installer.rb:201
  def add_found_dependencies(to_do, dependency_list); end

  # in file lib/rubygems/dependency_installer.rb:381
  def in_background(what); end

end

class Gem::DependencyList # is documented

  attr_reader :specs # in file lib/rubygems/dependency_list.rb:19
  # in file lib/rubygems/dependency_list.rb:55
  def clear(); end

  # in file lib/rubygems/dependency_list.rb:101
  def find_name(full_name); end

  # in file lib/rubygems/dependency_list.rb:116
  def why_not_ok?(quick = false); end

end


class Gem::DependencyResolutionError # is documented

  attr_reader :conflict # in file lib/rubygems/dependency_resolver.rb:21
  # in file lib/rubygems/dependency_resolver.rb:14
  def self.new(conflict); end

  # in file lib/rubygems/dependency_resolver.rb:23
  def conflicting_dependencies(); end

end

class Gem::DependencyResolver # is documented

  # in file lib/rubygems/dependency_resolver.rb:424
  def requests(s, act); end

end

class Gem::DependencyResolver::APISet # is documented

  # in file lib/rubygems/dependency_resolver.rb:92
  def self.new(); end

end

class Gem::DependencyResolver::APISpecification # is documented

  attr_reader :name # in file lib/rubygems/dependency_resolver.rb:81
  attr_reader :version # in file lib/rubygems/dependency_resolver.rb:81
  attr_reader :dependencies # in file lib/rubygems/dependency_resolver.rb:81
  # in file lib/rubygems/dependency_resolver.rb:72
  def self.new(set, api_data); end

  # in file lib/rubygems/dependency_resolver.rb:83
  def full_name(); end

end

class Gem::DependencyResolver::ActivationRequest # is documented

  attr_reader :spec # in file lib/rubygems/dependency_resolver.rb:359
  attr_reader :request # in file lib/rubygems/dependency_resolver.rb:359
  # in file lib/rubygems/dependency_resolver.rb:353
  def self.new(spec, req, others_possible=true); end

  # in file lib/rubygems/dependency_resolver.rb:401
  def ==(other); end

  # in file lib/rubygems/dependency_resolver.rb:391
  def download(path); end

  # in file lib/rubygems/dependency_resolver.rb:379
  def full_name(); end

  # in file lib/rubygems/dependency_resolver.rb:387
  def full_spec(); end

  # in file lib/rubygems/dependency_resolver.rb:375
  def name(); end

  # in file lib/rubygems/dependency_resolver.rb:383
  def version(); end

end

class Gem::DependencyResolver::CurrentSet # is documented

  # in file lib/rubygems/dependency_resolver.rb:234
  def find_all(req); end

  # in file lib/rubygems/dependency_resolver.rb:238
  def prefetch(gems); end

end

class Gem::DependencyResolver::DependencyConflict # is documented

  attr_reader :dependency # in file lib/rubygems/dependency_resolver.rb:294
  attr_reader :activated # in file lib/rubygems/dependency_resolver.rb:294
  # in file lib/rubygems/dependency_resolver.rb:288
  def self.new(dependency, activated, failed_dep=dependency); end

  # in file lib/rubygems/dependency_resolver.rb:302
  def for_spec?(spec); end

end

class Gem::DependencyResolver::DependencyRequest # is documented

  attr_reader :dependency # in file lib/rubygems/dependency_resolver.rb:322
  attr_reader :requester # in file lib/rubygems/dependency_resolver.rb:322
  # in file lib/rubygems/dependency_resolver.rb:317
  def self.new(dep, act); end

  # in file lib/rubygems/dependency_resolver.rb:336
  def ==(other); end

  # in file lib/rubygems/dependency_resolver.rb:328
  def matches_spec?(spec); end

  # in file lib/rubygems/dependency_resolver.rb:324
  def name(); end

  # in file lib/rubygems/dependency_resolver.rb:332
  def to_s(); end

end

class Gem::DependencyResolver::IndexSet # is documented

  # in file lib/rubygems/dependency_resolver.rb:181
  def self.new(); end

end

class Gem::DependencyResolver::IndexSpecification # is documented

  attr_reader :name # in file lib/rubygems/dependency_resolver.rb:162
  attr_reader :version # in file lib/rubygems/dependency_resolver.rb:162
  attr_reader :source # in file lib/rubygems/dependency_resolver.rb:162
  # in file lib/rubygems/dependency_resolver.rb:152
  def self.new(set, name, version, source, plat); end

  # in file lib/rubygems/dependency_resolver.rb:172
  def dependencies(); end

  # in file lib/rubygems/dependency_resolver.rb:164
  def full_name(); end

  # in file lib/rubygems/dependency_resolver.rb:168
  def spec(); end

end


class Gem::Exception # is documented

  attr_accessor :source_exception # in file lib/rubygems/exceptions.rb:10
end


class Gem::Ext::Builder # is documented

  # in file lib/rubygems/ext/builder.rb:9
  def self.class_name(); end

  # in file lib/rubygems/ext/builder.rb:14
  def self.make(dest_path, results); end

  # in file lib/rubygems/ext/builder.rb:39
  def self.redirector(); end

  # in file lib/rubygems/ext/builder.rb:43
  def self.run(command, results, command_name = nil); end

end

class Gem::Ext::CmakeBuilder # is documented

  # in file lib/rubygems/ext/cmake_builder.rb:2
  def self.build(extension, directory, dest_path, results); end

end

class Gem::Ext::ConfigureBuilder # is documented

  # in file lib/rubygems/ext/configure_builder.rb:11
  def self.build(extension, directory, dest_path, results, args=[]); end

end

class Gem::Ext::ExtConfBuilder # is documented

  # in file lib/rubygems/ext/ext_conf_builder.rb:12
  def self.build(extension, directory, dest_path, results, args=[]); end

end

class Gem::Ext::RakeBuilder # is documented

  # in file lib/rubygems/ext/rake_builder.rb:12
  def self.build(extension, directory, dest_path, results, args=[]); end

end

class Gem::FakeFetcher # is documented

  attr_reader :data # in file lib/rubygems/test_utilities.rb:25
  attr_reader :last_request # in file lib/rubygems/test_utilities.rb:26
  attr_reader :api_endpoints # in file lib/rubygems/test_utilities.rb:27
  attr_accessor :paths # in file lib/rubygems/test_utilities.rb:28
  # in file lib/rubygems/test_utilities.rb:30
  def self.new(); end

  # in file lib/rubygems/test_utilities.rb:36
  def api_endpoint(uri); end

  # in file lib/rubygems/test_utilities.rb:66
  def cache_update_path(uri, path = nil, update = true); end

  # in file lib/rubygems/test_utilities.rb:114
  def download(spec, source_uri, install_dir = Gem.dir); end

  # in file lib/rubygems/test_utilities.rb:137
  def download_to_cache(dependency); end

  # in file lib/rubygems/test_utilities.rb:52
  def fetch_path(path, mtime = nil); end

  # in file lib/rubygems/test_utilities.rb:99
  def fetch_size(path); end

  # in file lib/rubygems/test_utilities.rb:40
  def find_data(path); end

  # in file lib/rubygems/test_utilities.rb:86
  def request(uri, request_class, last_modified = nil); end

end

class Gem::FilePermissionError # is documented

  attr_reader :directory # in file lib/rubygems/exceptions.rb:38
  # in file lib/rubygems/exceptions.rb:40
  def self.new(directory); end

end

class Gem::FormatException # is documented

  attr_accessor :file_path # in file lib/rubygems/exceptions.rb:51
end


class Gem::GemNotInHomeException # is documented

  attr_accessor :spec # in file lib/rubygems/exceptions.rb:23
end

class Gem::GemRunner # is documented

  # in file lib/rubygems/gem_runner.rb:27
  def self.new(options={}); end

end

module Gem::GemcutterUtilities # is documented

  attr_writer :host # in file lib/rubygems/gemcutter_utilities.rb:58
  # in file lib/rubygems/gemcutter_utilities.rb:20
  def api_key(); end

  # in file lib/rubygems/gemcutter_utilities.rb:59
  def host(); end

  # in file lib/rubygems/gemcutter_utilities.rb:66
  def rubygems_api_request(method, path, host = nil, &block); end

  # in file lib/rubygems/gemcutter_utilities.rb:30
  def sign_in(sign_in_host = self.host); end

  # in file lib/rubygems/gemcutter_utilities.rb:96
  def verify_api_key(key); end

  # in file lib/rubygems/gemcutter_utilities.rb:82
  def with_response(resp); end

end

class Gem::ImpossibleDependenciesError # is documented

  attr_reader :conflicts # in file lib/rubygems/dependency_resolver.rb:56
  # in file lib/rubygems/dependency_resolver.rb:45
  def self.new(request, conflicts); end

  # in file lib/rubygems/dependency_resolver.rb:52
  def dependency(); end

end

class Gem::Indexer # is documented

  # in file lib/rubygems/indexer.rb:209
  def map_gems_to_specs(gems); end

end

class Gem::MockGemUi # is documented

  # in file lib/rubygems/mock_gem_ui.rb:44
  def self.new(input = ""); end

  # in file lib/rubygems/mock_gem_ui.rb:72
  def error(); end

  # in file lib/rubygems/mock_gem_ui.rb:64
  def input(); end

  # in file lib/rubygems/mock_gem_ui.rb:68
  def output(); end

  # in file lib/rubygems/mock_gem_ui.rb:76
  def terminated?(); end

end

class Gem::MockGemUi::InputEOFError # is documented

  # in file lib/rubygems/mock_gem_ui.rb:14
  def self.new(question); end

end


module Gem::MockGemUi::TTY # is documented

  attr_accessor :tty # in file lib/rubygems/mock_gem_ui.rb:32
  # in file lib/rubygems/mock_gem_ui.rb:39
  def noecho(); end

  # in file lib/rubygems/mock_gem_ui.rb:34
  def tty?(); end

end

class Gem::MockGemUi::TermError # is documented

  attr_reader :exit_code # in file lib/rubygems/mock_gem_ui.rb:21
  # in file lib/rubygems/mock_gem_ui.rb:23
  def self.new(exit_code); end

end

class Gem::NameTuple # is documented

  attr_reader :name # in file lib/rubygems/name_tuple.rb:20
  attr_reader :version # in file lib/rubygems/name_tuple.rb:20
  attr_reader :platform # in file lib/rubygems/name_tuple.rb:20
  # in file lib/rubygems/name_tuple.rb:9
  def self.new(name, version, platform="ruby"); end

  # in file lib/rubygems/name_tuple.rb:81
  def <=>(other); end

  # in file lib/rubygems/name_tuple.rb:106
  def hash(); end

  # in file lib/rubygems/name_tuple.rb:77
  def to_s(); end

end

class Gem::NoAliasYAMLTree # is documented

  # in file lib/rubygems/psych_tree.rb:4
  def visit_String(str); end

end


class Gem::Package # is documented

  # in file lib/rubygems/package.rb:105
  def self.build(spec, skip_validation=false); end

end



class Gem::Package::FormatError # is documented

  attr_reader :path # in file lib/rubygems/package.rb:54
  # in file lib/rubygems/package.rb:56
  def self.new(message, path = nil); end

end



class Gem::Package::PathError # is documented

  # in file lib/rubygems/package.rb:67
  def self.new(destination, destination_dir); end

end

class Gem::Package::TarTestCase # is documented

  # in file lib/rubygems/package/tar_test_case.rb:9
  def ASCIIZ(str, length); end

  # in file lib/rubygems/package/tar_test_case.rb:13
  def SP(s); end

  # in file lib/rubygems/package/tar_test_case.rb:17
  def SP_Z(s); end

  # in file lib/rubygems/package/tar_test_case.rb:21
  def Z(s); end

  # in file lib/rubygems/package/tar_test_case.rb:25
  def assert_headers_equal(expected, actual); end

  # in file lib/rubygems/package/tar_test_case.rb:69
  def calc_checksum(header); end

  # in file lib/rubygems/package/tar_test_case.rb:74
  def header(type, fname, dname, length, mode, checksum = nil); end

  # in file lib/rubygems/package/tar_test_case.rb:108
  def tar_dir_header(name, prefix, mode); end

  # in file lib/rubygems/package/tar_test_case.rb:114
  def tar_file_header(fname, dname, mode, length); end

  # in file lib/rubygems/package/tar_test_case.rb:120
  def to_oct(n, pad_size); end

  # in file lib/rubygems/package/tar_test_case.rb:132
  def util_dir_entry(); end

  # in file lib/rubygems/package/tar_test_case.rb:124
  def util_entry(tar); end

end

class Gem::Platform # is documented

  attr_accessor :cpu # in file lib/rubygems/platform.rb:10
  attr_accessor :os # in file lib/rubygems/platform.rb:12
  attr_accessor :version # in file lib/rubygems/platform.rb:14
  # in file lib/rubygems/platform.rb:16
  def self.local(); end

  # in file lib/rubygems/platform.rb:22
  def self.match(platform); end

  # in file lib/rubygems/platform.rb:41
  def self.new(arch); end

  # in file lib/rubygems/platform.rb:101
  def inspect(); end

  # in file lib/rubygems/platform.rb:105
  def to_a(); end

  # in file lib/rubygems/platform.rb:109
  def to_s(); end

end

class Gem::PlatformMismatch # is documented

  # in file lib/rubygems/errors.rb:46
  def self.new(name, version); end

end



class Gem::RemoteFetcher # is documented

  # in file lib/rubygems/test_utilities.rb:152
  def self.fetcher=(fetcher); end

  # in file lib/rubygems/remote_fetcher.rb:429
  def add_rubygems_trusted_certs(store); end

  # in file lib/rubygems/remote_fetcher.rb:410
  def configure_connection_for_https(connection); end

  # in file lib/rubygems/remote_fetcher.rb:436
  def correct_for_windows_path(path); end

  # in file lib/rubygems/remote_fetcher.rb:324
  def escape(str); end

  # in file lib/rubygems/remote_fetcher.rb:576
  def https?(uri); end

  # in file lib/rubygems/remote_fetcher.rb:444
  def no_proxy?(host); end

  # in file lib/rubygems/remote_fetcher.rb:330
  def unescape(str); end

  # in file lib/rubygems/remote_fetcher.rb:336
  def uri_escaper(); end

  # in file lib/rubygems/remote_fetcher.rb:557
  def user_agent(); end

end

class Gem::RemoteFetcher::FetchError # is documented

  # in file lib/rubygems/remote_fetcher.rb:25
  def self.new(message, uri); end

end

class Gem::RequestSet # is documented

  attr_reader :dependencies # in file lib/rubygems/request_set.rb:19
  # in file lib/rubygems/request_set.rb:13
  def self.new(*deps); end

  # in file lib/rubygems/request_set.rb:91
  def install_into(dir, force=true, &b); end

  # in file lib/rubygems/request_set.rb:81
  def sorted_requests(); end

  # in file lib/rubygems/request_set.rb:57
  def specs(); end

  # in file lib/rubygems/request_set.rb:85
  def specs_in(dir); end

end

class Gem::RequestSet::GemDepedencyAPI # is documented

  # in file lib/rubygems/request_set.rb:149
  def self.new(set, path); end

  # in file lib/rubygems/request_set.rb:178
  def group(*what); end

  # in file lib/rubygems/request_set.rb:154
  def load(); end

  # in file lib/rubygems/request_set.rb:170
  def platform(what); end

  # in file lib/rubygems/request_set.rb
  def platforms(what); end

end

class Gem::Requirement # is documented

  # in file lib/rubygems/requirement.rb:30
  PATTERN_RAW = nil
  # in file lib/rubygems/requirement.rb:31
  PATTERN = nil
  # in file lib/rubygems/requirement.rb:33
  DefaultRequirement = nil
  # in file lib/rubygems/requirement.rb:173
  def encode_with(coder); end

  # in file lib/rubygems/requirement.rb:169
  def to_yaml_properties(); end

end


module Gem::Security # is documented

  # in file lib/rubygems/security.rb:372
  def self.alt_name_or_x509_entry(certificate, x509_entry); end

end


class Gem::Security::Policy # is documented

  attr_reader :name # in file lib/rubygems/security/policy.rb:9
  attr_accessor :only_signed # in file lib/rubygems/security/policy.rb:11
  attr_accessor :only_trusted # in file lib/rubygems/security/policy.rb:12
  attr_accessor :verify_chain # in file lib/rubygems/security/policy.rb:13
  attr_accessor :verify_data # in file lib/rubygems/security/policy.rb:14
  attr_accessor :verify_root # in file lib/rubygems/security/policy.rb:15
  attr_accessor :verify_signer # in file lib/rubygems/security/policy.rb:16
  attr_reader :to_s # in file lib/rubygems/security/policy.rb
end


class Gem::Security::TrustDir # is documented

  # in file lib/rubygems/security/trust_dir.rb:3
  DEFAULT_PERMISSIONS = nil
  attr_reader :dir # in file lib/rubygems/security/trust_dir.rb:15
  # in file lib/rubygems/security/trust_dir.rb:8
  def self.new(dir, permissions = DEFAULT_PERMISSIONS); end

end

class Gem::Server # is documented

  # in file lib/rubygems/server.rb:36
  SEARCH = nil
  # in file lib/rubygems/server.rb:46
  DOC_TEMPLATE = nil
  # in file lib/rubygems/server.rb:342
  RDOC_NO_DOCUMENTATION = nil
  # in file lib/rubygems/server.rb:376
  RDOC_SEARCH_TEMPLATE = nil
  attr_reader :spec_dirs # in file lib/rubygems/server.rb:31
  # in file lib/rubygems/server.rb:432
  def self.new(gem_dirs, port, daemon, launch = nil, addresses = nil); end

  # in file lib/rubygems/server.rb:427
  def self.run(options); end

  # in file lib/rubygems/server.rb:453
  def add_date(res); end

  # in file lib/rubygems/server.rb:459
  def doc_root(gem_name); end

  # in file lib/rubygems/server.rb:467
  def have_rdoc_4_plus?(); end

  # in file lib/rubygems/server.rb:472
  def latest_specs(req, res); end

  # in file lib/rubygems/server.rb:815
  def launch(); end

  # in file lib/rubygems/server.rb:533
  def quick(req, res); end

  # in file lib/rubygems/server.rb:569
  def root(req, res); end

  # in file lib/rubygems/server.rb:739
  def run(); end

  # in file lib/rubygems/server.rb:789
  def specs(req, res); end

end

class Gem::SilentUI # is documented

  # in file lib/rubygems/user_interaction.rb:550
  def self.new(); end

end

class Gem::Source # is documented

  # in file lib/rubygems/source.rb:5
  FILES = nil
  attr_reader :uri # in file lib/rubygems/source.rb:20
  # in file lib/rubygems/source.rb:11
  def self.new(uri); end

  # in file lib/rubygems/source.rb:27
  def <=>(other); end

  # in file lib/rubygems/source.rb:40
  def ==(other); end

  # in file lib/rubygems/source.rb:22
  def api_uri(); end

  # in file lib/rubygems/source.rb:140
  def download(spec, dir=Dir.pwd); end

  # in file lib/rubygems/source.rb
  def eql?(other); end

  # in file lib/rubygems/source.rb:69
  def fetch_spec(name); end

  # in file lib/rubygems/source.rb:51
  def hash(); end

  # in file lib/rubygems/source.rb:65
  def update_cache?(); end

end

class Gem::Source::Local # is documented

  # in file lib/rubygems/source_local.rb:4
  def self.new(); end

  # in file lib/rubygems/source_local.rb:83
  def download(spec, cache_dir=nil); end

  # in file lib/rubygems/source_local.rb:73
  def fetch_spec(name); end

  # in file lib/rubygems/source_local.rb:50
  def find_gem(gem_name, version=Gem::Requirement.default, prerelease=false); end

end

class Gem::Source::SpecificFile # is documented

  attr_reader :spec # in file lib/rubygems/source_specific_file.rb:11
  # in file lib/rubygems/source_specific_file.rb:2
  def self.new(file); end

  # in file lib/rubygems/source_specific_file.rb:23
  def download(spec, dir=nil); end

  # in file lib/rubygems/source_specific_file.rb:17
  def fetch_spec(name); end

end

class Gem::SourceFetchProblem # is documented

  attr_reader :source # in file lib/rubygems/errors.rb:83
  attr_reader :error # in file lib/rubygems/errors.rb:83
  # in file lib/rubygems/errors.rb:78
  def self.new(source, error); end

  # in file lib/rubygems/errors.rb:85
  def wordy(); end

end

class Gem::SourceList # is documented

  attr_reader :sources # in file lib/rubygems/source_list.rb:8
  # in file lib/rubygems/source_list.rb:10
  def self.from(ary); end

  # in file lib/rubygems/source_list.rb:4
  def self.new(); end

  # in file lib/rubygems/source_list.rb:26
  def <<(obj); end

  # in file lib/rubygems/source_list.rb:58
  def ==(other); end

  # in file lib/rubygems/source_list.rb:80
  def delete(uri); end

  # in file lib/rubygems/source_list.rb:50
  def each(); end

  # in file lib/rubygems/source_list.rb:54
  def each_source(&b); end

  # in file lib/rubygems/source_list.rb:68
  def first(); end

  # in file lib/rubygems/source_list.rb:72
  def include?(other); end

  # in file lib/rubygems/source_list.rb:22
  def initialize_copy(other); end

  # in file lib/rubygems/source_list.rb:40
  def replace(other); end

  # in file lib/rubygems/source_list.rb:62
  def to_a(); end

  # in file lib/rubygems/source_list.rb
  def to_ary(); end

end

class Gem::SpecFetcher # is documented

  # in file lib/rubygems/spec_fetcher.rb:32
  def self.fetcher(); end

  # in file lib/rubygems/spec_fetcher.rb:40
  def self.new(); end

  # in file lib/rubygems/spec_fetcher.rb:215
  def tuples_for(source, type, gracefully_ignore=false); end

end

class Gem::SpecificGemNotFoundException # is documented

  attr_reader :name # in file lib/rubygems/exceptions.rb:65
  attr_reader :version # in file lib/rubygems/exceptions.rb:65
  attr_reader :errors # in file lib/rubygems/exceptions.rb:65
  # in file lib/rubygems/exceptions.rb:57
  def self.new(name, version, errors=nil); end

end

class Gem::Specification # is documented

  # in file lib/rubygems/specification.rb:106
  MARSHAL_FIELDS = nil
  # in file lib/rubygems/specification.rb:109
  TODAY = nil
  # in file lib/rubygems/specification.rb:1391
  DateTimeFormat = nil
  # in file lib/rubygems/specification.rb:620
  def self.default_specifications_dir(); end

  # in file lib/rubygems/specification.rb:2563
  def default_gem?(); end

  # in file lib/rubygems/specification.rb:1785
  def inspect(); end

end

class Gem::StreamUI # is documented

  attr_reader :ins # in file lib/rubygems/user_interaction.rb:129
  attr_reader :outs # in file lib/rubygems/user_interaction.rb:129
  attr_reader :errs # in file lib/rubygems/user_interaction.rb:129
  # in file lib/rubygems/user_interaction.rb:131
  def self.new(in_stream, out_stream, err_stream=STDERR, usetty=true); end

  # in file lib/rubygems/user_interaction.rb:138
  def tty?(); end

end

class Gem::StreamUI::SilentDownloadReporter # is documented

  # in file lib/rubygems/user_interaction.rb:471
  def self.new(out_stream, *args); end

  # in file lib/rubygems/user_interaction.rb:480
  def done(); end

  # in file lib/rubygems/user_interaction.rb:474
  def fetch(filename, filesize); end

  # in file lib/rubygems/user_interaction.rb:477
  def update(current); end

end

class Gem::StreamUI::SilentProgressReporter # is documented

  attr_reader :count # in file lib/rubygems/user_interaction.rb:367
  # in file lib/rubygems/user_interaction.rb:369
  def self.new(out_stream, size, initial_message, terminal_message = nil); end

  # in file lib/rubygems/user_interaction.rb:375
  def done(); end

  # in file lib/rubygems/user_interaction.rb:372
  def updated(message); end

end

class Gem::StreamUI::SimpleProgressReporter # is documented

  attr_reader :count # in file lib/rubygems/user_interaction.rb:386
  # in file lib/rubygems/user_interaction.rb:388
  def self.new(out_stream, size, initial_message, terminal_message = "complete"); end

end

class Gem::StreamUI::VerboseDownloadReporter # is documented

  attr_reader :file_name # in file lib/rubygems/user_interaction.rb:488
  attr_reader :total_bytes # in file lib/rubygems/user_interaction.rb:488
  attr_reader :progress # in file lib/rubygems/user_interaction.rb:488
  # in file lib/rubygems/user_interaction.rb:490
  def self.new(out_stream, *args); end

  # in file lib/rubygems/user_interaction.rb:516
  def done(); end

  # in file lib/rubygems/user_interaction.rb:495
  def fetch(file_name, total_bytes); end

  # in file lib/rubygems/user_interaction.rb:503
  def update(bytes); end

end

class Gem::StreamUI::VerboseProgressReporter # is documented

  attr_reader :count # in file lib/rubygems/user_interaction.rb:423
  # in file lib/rubygems/user_interaction.rb:425
  def self.new(out_stream, size, initial_message, terminal_message = 'complete'); end

end

class Gem::SystemExitException # is documented

  attr_accessor :exit_code # in file lib/rubygems/exceptions.rb:100
  # in file lib/rubygems/exceptions.rb:102
  def self.new(exit_code); end

end

class Gem::TestCase # is documented

  # in file lib/rubygems/test_case.rb:369
  def all_spec_names(); end

  # in file lib/rubygems/test_case.rb:549
  def new_default_spec(name, version, deps = nil, *files); end

  # in file lib/rubygems/test_case.rb:412
  def quick_spec(name, version = '2'); end

  # in file lib/rubygems/test_case.rb:460
  def util_remove_gem(spec); end

end

class Gem::TestCase::StaticSet # is documented

  # in file lib/rubygems/test_case.rb:973
  def self.new(specs); end

  # in file lib/rubygems/test_case.rb:983
  def find_all(dep); end

  # in file lib/rubygems/test_case.rb:977
  def find_spec(dep); end

  # in file lib/rubygems/test_case.rb:987
  def prefetch(reqs); end

end


class Gem::Uninstaller # is documented

  # in file lib/rubygems/uninstaller.rb:293
  def ask_if_ok(spec); end

  # in file lib/rubygems/uninstaller.rb:286
  def dependencies_ok?(spec); end

  # in file lib/rubygems/uninstaller.rb:314
  def formatted_program_filename(filename); end

end

class Gem::UnsatisfiableDepedencyError # is documented

  attr_reader :dependency # in file lib/rubygems/dependency_resolver.rb:38
  # in file lib/rubygems/dependency_resolver.rb:32
  def self.new(dep); end

end

module Gem::UserInteraction # is documented

  # in file lib/rubygems/user_interaction.rb:87
  def alert(*args); end

  # in file lib/rubygems/user_interaction.rb:91
  def alert_error(*args); end

  # in file lib/rubygems/user_interaction.rb:95
  def alert_warning(*args); end

  # in file lib/rubygems/user_interaction.rb:99
  def ask(*args); end

  # in file lib/rubygems/user_interaction.rb:103
  def ask_for_password(*args); end

  # in file lib/rubygems/user_interaction.rb:107
  def ask_yes_no(*args); end

  # in file lib/rubygems/user_interaction.rb:111
  def choose_from_list(*args); end

  # in file lib/rubygems/user_interaction.rb:115
  def say(*args); end

  # in file lib/rubygems/user_interaction.rb:119
  def terminate_interaction(*args); end

end

class Gem::Validator # is documented

  # in file lib/rubygems/validator.rb:60
  ErrorData = nil
  # in file lib/rubygems/validator.rb:17
  def self.new(); end

end


class Gem::Version # is documented

  # in file lib/rubygems/version.rb:258
  def encode_with(coder); end

  # in file lib/rubygems/version.rb:254
  def to_yaml_properties(); end

  # in file lib/rubygems/version.rb:248
  def yaml_initialize(tag, map); end

end


class GetoptLong # is documented

  # in file lib/getoptlong.rb:101
  STATUS_TERMINATED = nil
end






class HttpServer # is documented

  # in file lib/xmlrpc/httpserver.rb:24
  CRLF = nil
  # in file lib/xmlrpc/httpserver.rb:25
  HTTP_PROTO = nil
  # in file lib/xmlrpc/httpserver.rb:26
  SERVER_NAME = nil
end

class HttpServer::Request # is documented

  attr_reader :data # in file lib/xmlrpc/httpserver.rb:44
  attr_reader :header # in file lib/xmlrpc/httpserver.rb:44
  attr_reader :method # in file lib/xmlrpc/httpserver.rb:44
  attr_reader :path # in file lib/xmlrpc/httpserver.rb:44
  attr_reader :proto # in file lib/xmlrpc/httpserver.rb:44
  # in file lib/xmlrpc/httpserver.rb:46
  def self.new(data, method=nil, path=nil, proto=nil); end

  # in file lib/xmlrpc/httpserver.rb:51
  def content_length(); end

end

class HttpServer::Response # is documented

  attr_reader :header # in file lib/xmlrpc/httpserver.rb:60
  attr_accessor :body # in file lib/xmlrpc/httpserver.rb:61
  attr_accessor :status # in file lib/xmlrpc/httpserver.rb:61
  attr_accessor :status_message # in file lib/xmlrpc/httpserver.rb:61
  # in file lib/xmlrpc/httpserver.rb:63
  def self.new(status=200); end

end

class HttpServer::Table # is documented

  # in file lib/xmlrpc/httpserver.rb:74
  def self.new(hash={}); end

  # in file lib/xmlrpc/httpserver.rb:79
  def [](key); end

  # in file lib/xmlrpc/httpserver.rb:83
  def []=(key, value); end

  # in file lib/xmlrpc/httpserver.rb:92
  def each(); end

  # in file lib/xmlrpc/httpserver.rb:87
  def update(hash); end

end


class Logger # is documented

  # in file lib/logger.rb:203
  VERSION = nil
  # in file lib/logger.rb:211
  ProgName = nil
end

class Logger::Application # is documented

  # in file lib/logger.rb:779
  def log=(logdev); end

end

class Logger::Formatter # is documented

  # in file lib/logger.rb:501
  Format = nil
  attr_accessor :datetime_format # in file lib/logger.rb:503
  # in file lib/logger.rb:505
  def self.new(); end

  # in file lib/logger.rb:509
  def call(severity, time, progname, msg); end

end

class Logger::LogDevice # is documented

  # in file lib/logger.rb:615
  SiD = nil
  attr_reader :dev # in file lib/logger.rb:540
  attr_reader :filename # in file lib/logger.rb:541
  # in file lib/logger.rb:547
  def self.new(log = nil, opt = {}); end

  # in file lib/logger.rb:582
  def close(); end

  # in file lib/logger.rb:561
  def write(message); end

end

module MakeMakefile # is documented

  # in file lib/mkmf.rb:52
  ORIG_LIBPATH = nil
  # in file lib/mkmf.rb:2424
  EXPORT_PREFIX = nil
  # in file lib/mkmf.rb:2453
  RULE_SUBST = nil
  # in file lib/mkmf.rb:2488
  RPATHFLAG = nil
  # in file lib/mkmf.rb:2499
  UNIVERSAL_INTS = nil
end

# in files:
#   lib/mkmf.rb

module MakeMakefile::File
end


class Matrix # is documented

  # in file lib/matrix.rb:515
  SELECTORS = nil
  # in file lib/matrix.rb:1311
  def elements_to_f(); end

  # in file lib/matrix.rb:1316
  def elements_to_i(); end

  # in file lib/matrix.rb:1321
  def elements_to_r(); end

  # in file lib/matrix.rb:773
  def eql?(other); end

end


class Matrix::LUPDecomposition # is documented

  # in file lib/matrix/lup_decomposition.rb:153
  def self.new(a); end

  # in file lib/matrix/lup_decomposition.rb:21
  def l(); end

end

module MiniTest # is documented

  attr_accessor :backtrace_filter # in file lib/minitest/unit.rb:42
end


class MiniTest::Unit::TestCase # is documented

  # in file lib/test/unit.rb:855
  RUN_TEST_TRACE = nil
  # in file lib/test/unit.rb:856
  def run_test(name); end

end

# in files:
#   lib/minitest/hell.rb
#   lib/minitest/unit.rb

module Minitest
end

# in files:
#   lib/minitest/hell.rb

module Minitest::Unit
end



module MonitorMixin # is documented

  # in file lib/monitor.rb:159
  def self.extend_object(obj); end

end

class MonitorMixin::ConditionVariable # is documented

  # in file lib/monitor.rb:153
  def self.new(monitor); end

end


class NQXML::Node # is documented

  # in file lib/xmlrpc/parser.rb:24
  def [](index); end

  # in file lib/xmlrpc/parser.rb:18
  def childNodes(); end

  # in file lib/xmlrpc/parser.rb:21
  def hasChildNodes(); end

  # in file lib/xmlrpc/parser.rb:41
  def nodeName(); end

  # in file lib/xmlrpc/parser.rb:28
  def nodeType(); end

  # in file lib/xmlrpc/parser.rb:37
  def nodeValue(); end

  # in file lib/xmlrpc/parser.rb:15
  def removeChild(node); end

end

class Net::HTTP # is documented

  # in file lib/net/http.rb:761
  SSL_IVNAMES = nil
  # in file lib/net/http.rb:774
  SSL_ATTRIBUTES = nil
  # in file lib/net/http/backward.rb:6
  ProxyMod = nil
  attr_writer :proxy_from_env # in file lib/net/http.rb:695
  attr_writer :proxy_address # in file lib/net/http.rb:696
  attr_writer :proxy_port # in file lib/net/http.rb:697
  attr_writer :proxy_user # in file lib/net/http.rb:698
  attr_writer :proxy_pass # in file lib/net/http.rb:699
  attr_accessor :close_on_empty_response # in file lib/net/http.rb:742
  # in file lib/net/http.rb:665
  def inspect(); end

end

class Net::HTTP::Copy # is documented

  # in file lib/net/http/requests.rb:97
  METHOD = nil
  # in file lib/net/http/requests.rb:98
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:99
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Delete # is documented

  # in file lib/net/http/requests.rb:40
  METHOD = nil
  # in file lib/net/http/requests.rb:41
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:42
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Get # is documented

  # in file lib/net/http/requests.rb:8
  METHOD = nil
  # in file lib/net/http/requests.rb:9
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:10
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Head # is documented

  # in file lib/net/http/requests.rb:16
  METHOD = nil
  # in file lib/net/http/requests.rb:17
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:18
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Lock # is documented

  # in file lib/net/http/requests.rb:111
  METHOD = nil
  # in file lib/net/http/requests.rb:112
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:113
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Mkcol # is documented

  # in file lib/net/http/requests.rb:90
  METHOD = nil
  # in file lib/net/http/requests.rb:91
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:92
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Move # is documented

  # in file lib/net/http/requests.rb:104
  METHOD = nil
  # in file lib/net/http/requests.rb:105
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:106
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Options # is documented

  # in file lib/net/http/requests.rb:47
  METHOD = nil
  # in file lib/net/http/requests.rb:48
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:49
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Patch # is documented

  # in file lib/net/http/requests.rb:65
  METHOD = nil
  # in file lib/net/http/requests.rb:66
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:67
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Post # is documented

  # in file lib/net/http/requests.rb:24
  METHOD = nil
  # in file lib/net/http/requests.rb:25
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:26
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Propfind # is documented

  # in file lib/net/http/requests.rb:76
  METHOD = nil
  # in file lib/net/http/requests.rb:77
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:78
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Proppatch # is documented

  # in file lib/net/http/requests.rb:83
  METHOD = nil
  # in file lib/net/http/requests.rb:84
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:85
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Put # is documented

  # in file lib/net/http/requests.rb:32
  METHOD = nil
  # in file lib/net/http/requests.rb:33
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:34
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Trace # is documented

  # in file lib/net/http/requests.rb:54
  METHOD = nil
  # in file lib/net/http/requests.rb:55
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:56
  RESPONSE_HAS_BODY = nil
end

class Net::HTTP::Unlock # is documented

  # in file lib/net/http/requests.rb:118
  METHOD = nil
  # in file lib/net/http/requests.rb:119
  REQUEST_HAS_BODY = nil
  # in file lib/net/http/requests.rb:120
  RESPONSE_HAS_BODY = nil
end

class Net::HTTPAccepted # is documented

  # in file lib/net/http/responses.rb:42
  HAS_BODY = nil
end

class Net::HTTPBadGateway # is documented

  # in file lib/net/http/responses.rb:179
  HAS_BODY = nil
end

class Net::HTTPBadRequest # is documented

  # in file lib/net/http/responses.rb:89
  HAS_BODY = nil
end


class Net::HTTPClientError # is documented

  # in file lib/net/http/responses.rb:19
  HAS_BODY = nil
  # in file lib/net/http/responses.rb:20
  EXCEPTION_TYPE = nil
end

class Net::HTTPConflict # is documented

  # in file lib/net/http/responses.rb:116
  HAS_BODY = nil
end

class Net::HTTPContinue # is documented

  # in file lib/net/http/responses.rb:28
  HAS_BODY = nil
end

class Net::HTTPCreated # is documented

  # in file lib/net/http/responses.rb:39
  HAS_BODY = nil
end


module Net::HTTPExceptions # is documented

  attr_reader :response # in file lib/net/http/exceptions.rb:9
  attr_reader :data # in file lib/net/http/exceptions.rb
end

class Net::HTTPExpectationFailed # is documented

  # in file lib/net/http/responses.rb:141
  HAS_BODY = nil
end

class Net::HTTPFailedDependency # is documented

  # in file lib/net/http/responses.rb:152
  HAS_BODY = nil
end


class Net::HTTPForbidden # is documented

  # in file lib/net/http/responses.rb:98
  HAS_BODY = nil
end

class Net::HTTPFound # is documented

  # in file lib/net/http/responses.rb:70
  HAS_BODY = nil
end

class Net::HTTPGatewayTimeOut # is documented

  # in file lib/net/http/responses.rb:185
  HAS_BODY = nil
end

class Net::HTTPGenericRequest # is documented

  attr_reader :method # in file lib/net/http/generic_request.rb:53
  attr_reader :path # in file lib/net/http/generic_request.rb:54
  attr_reader :uri # in file lib/net/http/generic_request.rb:55
  attr_reader :body # in file lib/net/http/generic_request.rb:89
  attr_reader :body_stream # in file lib/net/http/generic_request.rb:98
  # in file lib/net/http/generic_request.rb:10
  def self.new(m, reqbody, resbody, uri_or_path, initheader = nil); end

  # in file lib/net/http/generic_request.rb:91
  def body=(str); end

  # in file lib/net/http/generic_request.rb:84
  def body_exist?(); end

  # in file lib/net/http/generic_request.rb:100
  def body_stream=(input); end

  # in file lib/net/http/generic_request.rb:62
  def inspect(); end

  # in file lib/net/http/generic_request.rb:76
  def request_body_permitted?(); end

  # in file lib/net/http/generic_request.rb:80
  def response_body_permitted?(); end

end

class Net::HTTPGone # is documented

  # in file lib/net/http/responses.rb:119
  HAS_BODY = nil
end

module Net::HTTPHeader # is documented

  # in file lib/net/http/header.rb:433
  def connection_close?(); end

  # in file lib/net/http/header.rb:438
  def connection_keep_alive?(); end

  # in file lib/net/http/header.rb:268
  def content_length=(len); end

  # in file lib/net/http/header.rb:12
  def initialize_http_header(initheader); end

end


class Net::HTTPInformation # is documented

  # in file lib/net/http/responses.rb:7
  HAS_BODY = nil
end

class Net::HTTPInsufficientStorage # is documented

  # in file lib/net/http/responses.rb:192
  HAS_BODY = nil
end

class Net::HTTPInternalServerError # is documented

  # in file lib/net/http/responses.rb:173
  HAS_BODY = nil
end

class Net::HTTPLengthRequired # is documented

  # in file lib/net/http/responses.rb:122
  HAS_BODY = nil
end

class Net::HTTPLocked # is documented

  # in file lib/net/http/responses.rb:149
  HAS_BODY = nil
end

class Net::HTTPMethodNotAllowed # is documented

  # in file lib/net/http/responses.rb:104
  HAS_BODY = nil
end

class Net::HTTPMovedPermanently # is documented

  # in file lib/net/http/responses.rb:67
  HAS_BODY = nil
end

class Net::HTTPMultiStatus # is documented

  # in file lib/net/http/responses.rb:57
  HAS_BODY = nil
end

class Net::HTTPMultipleChoices # is documented

  # in file lib/net/http/responses.rb:63
  HAS_BODY = nil
end

class Net::HTTPNetworkAuthenticationRequired # is documented

  # in file lib/net/http/responses.rb:198
  HAS_BODY = nil
end

class Net::HTTPNoContent # is documented

  # in file lib/net/http/responses.rb:48
  HAS_BODY = nil
end

class Net::HTTPNonAuthoritativeInformation # is documented

  # in file lib/net/http/responses.rb:45
  HAS_BODY = nil
end

class Net::HTTPNotAcceptable # is documented

  # in file lib/net/http/responses.rb:107
  HAS_BODY = nil
end

class Net::HTTPNotFound # is documented

  # in file lib/net/http/responses.rb:101
  HAS_BODY = nil
end

class Net::HTTPNotImplemented # is documented

  # in file lib/net/http/responses.rb:176
  HAS_BODY = nil
end

class Net::HTTPNotModified # is documented

  # in file lib/net/http/responses.rb:77
  HAS_BODY = nil
end

class Net::HTTPOK # is documented

  # in file lib/net/http/responses.rb:36
  HAS_BODY = nil
end

class Net::HTTPPartialContent # is documented

  # in file lib/net/http/responses.rb:54
  HAS_BODY = nil
end

class Net::HTTPPaymentRequired # is documented

  # in file lib/net/http/responses.rb:95
  HAS_BODY = nil
end

class Net::HTTPPreconditionFailed # is documented

  # in file lib/net/http/responses.rb:125
  HAS_BODY = nil
end

class Net::HTTPPreconditionRequired # is documented

  # in file lib/net/http/responses.rb:159
  HAS_BODY = nil
end

class Net::HTTPProxyAuthenticationRequired # is documented

  # in file lib/net/http/responses.rb:110
  HAS_BODY = nil
end

class Net::HTTPRedirection # is documented

  # in file lib/net/http/responses.rb:15
  HAS_BODY = nil
end


class Net::HTTPRequestEntityTooLarge # is documented

  # in file lib/net/http/responses.rb:128
  HAS_BODY = nil
end

class Net::HTTPRequestHeaderFieldsTooLarge # is documented

  # in file lib/net/http/responses.rb:165
  HAS_BODY = nil
end

class Net::HTTPRequestTimeOut # is documented

  # in file lib/net/http/responses.rb:113
  HAS_BODY = nil
end

class Net::HTTPRequestURITooLong # is documented

  # in file lib/net/http/responses.rb:131
  HAS_BODY = nil
end

class Net::HTTPRequestedRangeNotSatisfiable # is documented

  # in file lib/net/http/responses.rb:138
  HAS_BODY = nil
end

class Net::HTTPResetContent # is documented

  # in file lib/net/http/responses.rb:51
  HAS_BODY = nil
end

class Net::HTTPResponse # is documented

  # in file lib/net/http/responses.rb:202
  CODE_CLASS_TO_OBJ = nil
  # in file lib/net/http/responses.rb:209
  CODE_TO_OBJ = nil
  # in file lib/net/http/response.rb:106
  def inspect(); end

end


class Net::HTTPSeeOther # is documented

  # in file lib/net/http/responses.rb:74
  HAS_BODY = nil
end

class Net::HTTPServerError # is documented

  # in file lib/net/http/responses.rb:23
  HAS_BODY = nil
  # in file lib/net/http/responses.rb:24
  EXCEPTION_TYPE = nil
end


class Net::HTTPServiceUnavailable # is documented

  # in file lib/net/http/responses.rb:182
  HAS_BODY = nil
end

class Net::HTTPSuccess # is documented

  # in file lib/net/http/responses.rb:11
  HAS_BODY = nil
end

class Net::HTTPSwitchProtocol # is documented

  # in file lib/net/http/responses.rb:31
  HAS_BODY = nil
end

class Net::HTTPTemporaryRedirect # is documented

  # in file lib/net/http/responses.rb:84
  HAS_BODY = nil
end

class Net::HTTPTooManyRequests # is documented

  # in file lib/net/http/responses.rb:162
  HAS_BODY = nil
end

class Net::HTTPUnauthorized # is documented

  # in file lib/net/http/responses.rb:92
  HAS_BODY = nil
end

class Net::HTTPUnknownResponse # is documented

  # in file lib/net/http/responses.rb:3
  HAS_BODY = nil
end

class Net::HTTPUnprocessableEntity # is documented

  # in file lib/net/http/responses.rb:146
  HAS_BODY = nil
end

class Net::HTTPUnsupportedMediaType # is documented

  # in file lib/net/http/responses.rb:135
  HAS_BODY = nil
end

class Net::HTTPUpgradeRequired # is documented

  # in file lib/net/http/responses.rb:156
  HAS_BODY = nil
end

class Net::HTTPUseProxy # is documented

  # in file lib/net/http/responses.rb:80
  HAS_BODY = nil
end

class Net::HTTPVersionNotSupported # is documented

  # in file lib/net/http/responses.rb:188
  HAS_BODY = nil
end

class Net::IMAP # is documented

  # in file lib/net/imap.rb:1321
  DATE_MONTH = nil
end


class Net::IMAP::BodyTypeAttachment # is documented

  # in file lib/net/imap.rb:1990
  def multipart?(); end

end

class Net::IMAP::BodyTypeBasic # is documented

  # in file lib/net/imap.rb:1903
  def multipart?(); end

end

class Net::IMAP::BodyTypeExtension # is documented

  # in file lib/net/imap.rb:2039
  def multipart?(); end

end

class Net::IMAP::BodyTypeMessage # is documented

  # in file lib/net/imap.rb:1961
  def multipart?(); end

end

class Net::IMAP::BodyTypeMultipart # is documented

  # in file lib/net/imap.rb:2022
  def multipart?(); end

end

class Net::IMAP::BodyTypeText # is documented

  # in file lib/net/imap.rb:1931
  def multipart?(); end

end


class Net::IMAP::CramMD5Authenticator # is documented

  # in file lib/net/imap.rb:3418
  def self.new(user, password); end

  # in file lib/net/imap.rb:3411
  def process(challenge); end

end


class Net::IMAP::DigestMD5Authenticator # is documented

  # in file lib/net/imap.rb:3517
  STAGE_ONE = nil
  # in file lib/net/imap.rb:3518
  STAGE_TWO = nil
  # in file lib/net/imap.rb:3510
  def self.new(user, password, authname = nil); end

  # in file lib/net/imap.rb:3445
  def process(challenge); end

end



class Net::IMAP::LoginAuthenticator # is documented

  # in file lib/net/imap.rb:3381
  STATE_USER = nil
  # in file lib/net/imap.rb:3382
  STATE_PASSWORD = nil
  # in file lib/net/imap.rb:3384
  def self.new(user, password); end

  # in file lib/net/imap.rb:3369
  def process(data); end

end


# in files:
#   lib/net/imap.rb

module Net::IMAP::OpenSSL
end

class Net::IMAP::PlainAuthenticator # is documented

  # in file lib/net/imap.rb:3401
  def self.new(user, password); end

  # in file lib/net/imap.rb:3395
  def process(data); end

end

class Net::IMAP::ResponseError # is documented

  # in file lib/net/imap.rb:3561
  def self.new(response); end

end




class Net::InternetMessageIO::WriteAdapter # is documented

  # in file lib/net/protocol.rb:358
  def self.new(socket, method); end

  # in file lib/net/protocol.rb:373
  def <<(str); end

  # in file lib/net/protocol.rb:363
  def inspect(); end

  # in file lib/net/protocol.rb
  def print(str); end

  # in file lib/net/protocol.rb:382
  def printf(*args); end

  # in file lib/net/protocol.rb:378
  def puts(str = ''); end

  # in file lib/net/protocol.rb:367
  def write(str); end

end

class Net::SMTP # is documented

  # in file lib/net/smtp.rb:173
  Revision = nil
  # in file lib/net/smtp.rb:792
  IMASK = nil
  # in file lib/net/smtp.rb:793
  OMASK = nil
  # in file lib/net/smtp.rb:801
  CRAM_BUFSIZE = nil
  # in file lib/net/smtp.rb:194
  def self.default_ssl_context(); end

  # in file lib/net/smtp.rb:754
  def auth_cram_md5(user, secret); end

  # in file lib/net/smtp.rb:743
  def auth_login(user, secret); end

  # in file lib/net/smtp.rb:734
  def auth_plain(user, secret); end

  # in file lib/net/smtp.rb:728
  def authenticate(user, secret, authtype = DEFAULT_AUTH_TYPE); end

  # in file lib/net/smtp.rb:826
  def ehlo(domain); end

  # in file lib/net/smtp.rb:822
  def helo(domain); end

  # in file lib/net/smtp.rb:830
  def mailfrom(from_addr); end

  # in file lib/net/smtp.rb:908
  def quit(); end

  # in file lib/net/smtp.rb:858
  def rcptto(to_addr); end

  # in file lib/net/smtp.rb:837
  def rcptto_list(to_addrs); end

end

class Object # is documented

  # in file lib/optparse.rb:1939
  Version = nil
  # in file lib/yaml.rb:56
  YAML = nil
  # in file lib/un.rb:35
  def setup(options = "", *long_options); end

end


module OpenURI # is documented

  # in file lib/open-uri.rb:98
  Options = nil
end

class OpenURI::HTTPError # is documented

  attr_reader :io # in file lib/open-uri.rb:362
  # in file lib/open-uri.rb:358
  def self.new(message, io); end

end

class OpenURI::HTTPRedirect # is documented

  attr_reader :uri # in file lib/open-uri.rb:372
  # in file lib/open-uri.rb:368
  def self.new(message, io, uri); end

end



class OptionParser # is documented

  # in file lib/optparse.rb:1096
  SPLAT_PROC = nil
  # in file lib/optparse/version.rb:49
  def self.each_const(path, base = ::Object); end

  # in file lib/optparse/version.rb:59
  def self.search_const(klass, name); end

  # in file lib/optparse/version.rb:4
  def self.show_version(*pkgs); end

  # in file lib/optparse.rb:902
  def self.terminate(arg = nil); end

  # in file lib/optparse.rb:907
  def self.top(); end

  # in file lib/optparse.rb:1016
  def abort(mesg = $!); end

  # in file lib/optparse.rb:1553
  def candidate(word); end

  # in file lib/optparse.rb
  def def_head_option(*opts, &block); end

  # in file lib/optparse.rb
  def def_option(*opts, &block); end

  # in file lib/optparse.rb
  def def_tail_option(*opts, &block); end

  # in file lib/optparse.rb:1279
  def define(*opts, &block); end

  # in file lib/optparse.rb:1294
  def define_head(*opts, &block); end

  # in file lib/optparse.rb:1308
  def define_tail(*opts, &block); end

  # in file lib/optparse.rb:866
  def inc(*args); end

  # in file lib/optparse.rb:1012
  def warn(mesg = $!); end

end

class OptionParser::AC # is documented

  # in file lib/optparse/ac.rb:34
  def ac_arg_disable(name, help_string, &block); end

  # in file lib/optparse/ac.rb:30
  def ac_arg_enable(name, help_string, &block); end

  # in file lib/optparse/ac.rb:38
  def ac_arg_with(name, help_string, &block); end

end


module OptionParser::Arguable # is documented

  # in file lib/optparse.rb:1918
  def self.new(*args); end

end


module OptionParser::Completion # is documented

  # in file lib/optparse.rb:234
  def self.candidate(key, icase = false, pat = nil, &block); end

  # in file lib/optparse.rb:230
  def self.regexp(key, icase); end

  # in file lib/optparse.rb:251
  def candidate(key, icase = false, pat = nil); end

  # in file lib/optparse.rb:256
  def complete(key, icase = false, pat = nil); end

  # in file lib/optparse.rb:281
  def convert(opt = nil, val = nil, *); end

end


class OptionParser::ParseError # is documented

  attr_reader :args # in file lib/optparse.rb:1740
  attr_writer :reason # in file lib/optparse.rb:1741
  # in file lib/optparse.rb:1751
  def self.filter_backtrace(array); end

  # in file lib/optparse.rb:1735
  def self.new(*args); end

  # in file lib/optparse.rb:1778
  def inspect(); end

  # in file lib/optparse.rb:1758
  def set_backtrace(array); end

  # in file lib/optparse.rb:1762
  def set_option(opt, eq); end

end

# in files:
#   lib/optparse.rb

module OptionParser::Regexp
end

class OptionParser::Switch # is documented

  attr_reader :pattern # in file lib/optparse.rb:302
  attr_reader :conv # in file lib/optparse.rb:302
  attr_reader :short # in file lib/optparse.rb:302
  attr_reader :long # in file lib/optparse.rb:302
  attr_reader :arg # in file lib/optparse.rb:302
  attr_reader :desc # in file lib/optparse.rb:302
  attr_reader :block # in file lib/optparse.rb:302
  # in file lib/optparse.rb:323
  def self.incompatible_argument_styles(arg, t); end

  # in file lib/optparse.rb:332
  def self.new(pattern = nil, conv = nil, short = nil, long = nil, arg = nil, desc = ([] if short or long), block = Proc.new); end

  # in file lib/optparse.rb:328
  def self.pattern(); end

end

class OptionParser::Switch::NoArgument # is documented

  # in file lib/optparse.rb:478
  def self.incompatible_argument_styles(*); end

  # in file lib/optparse.rb:481
  def self.pattern(); end

end


class PStore # is documented

  # in file lib/pstore.rb:94
  RDWR_ACCESS = nil
  # in file lib/pstore.rb:95
  RD_ACCESS = nil
  # in file lib/pstore.rb:96
  WR_ACCESS = nil
  # in file lib/pstore.rb:355
  EMPTY_MARSHAL_DATA = nil
  # in file lib/pstore.rb:356
  EMPTY_MARSHAL_CHECKSUM = nil
end


class ParallelEach # is documented

  # in file lib/minitest/parallel_each.rb:11
  N = nil
  # in file lib/minitest/parallel_each.rb:13
  def self.new(list); end

  # in file lib/minitest/parallel_each.rb:24
  def each(); end

  # in file lib/minitest/parallel_each.rb:20
  def grep(pattern); end

end


class Prime::EratosthenesGenerator # is documented

  # in file lib/prime.rb:308
  def self.new(); end

end

class Prime::EratosthenesSieve # is documented

  # in file lib/prime.rb:425
  BITS_PER_ENTRY = nil
  # in file lib/prime.rb:426
  NUMS_PER_ENTRY = nil
  # in file lib/prime.rb:427
  ENTRIES_PER_TABLE = nil
  # in file lib/prime.rb:428
  NUMS_PER_TABLE = nil
  # in file lib/prime.rb:429
  FILLED_ENTRY = nil
end

class Prime::Generator23 # is documented

  # in file lib/prime.rb:346
  def self.new(); end

end


class Prime::PseudoPrimeGenerator # is documented

  # in file lib/prime.rb:244
  def self.new(ubound = nil); end

  # in file lib/prime.rb:251
  def upper_bound(); end

  # in file lib/prime.rb:248
  def upper_bound=(ubound); end

end


class Prime::TrialDivisionGenerator # is documented

  # in file lib/prime.rb:325
  def self.new(); end

end

module Profiler__ # is documented

  # in file lib/profiler.rb:110
  def print_profile(f); end

  # in file lib/profiler.rb:99
  def start_profile(); end

  # in file lib/profiler.rb:106
  def stop_profile(); end

end


module REXML # is documented

  # in file lib/rexml/rexml.rb:23
  COPYRIGHT = nil
  # in file lib/rexml/rexml.rb:24
  DATE = nil
  # in file lib/rexml/rexml.rb:25
  VERSION = nil
  # in file lib/rexml/rexml.rb:26
  REVISION = nil
  # in file lib/rexml/rexml.rb:28
  Copyright = nil
  # in file lib/rexml/rexml.rb:29
  Version = nil
end

class REXML::AttlistDecl # is documented

  # in file lib/rexml/attlistdecl.rb:58
  def node_type(); end

end

class REXML::Attribute # is documented

  # in file lib/rexml/attribute.rb:18
  PATTERN = nil
  # in file lib/rexml/attribute.rb:20
  NEEDS_A_SECOND_CHECK = nil
  # in file lib/rexml/attribute.rb:115
  def doctype(); end

  # in file lib/rexml/attribute.rb:175
  def inspect(); end

  # in file lib/rexml/attribute.rb:171
  def node_type(); end

  # in file lib/rexml/attribute.rb:181
  def xpath(); end

end

class REXML::Attributes # is documented

  # in file lib/rexml/element.rb:1149
  def namespaces(); end

  # in file lib/rexml/element.rb:992
  def to_a(); end

end

class REXML::CData # is documented

  # in file lib/rexml/cdata.rb:5
  START = nil
  # in file lib/rexml/cdata.rb:6
  STOP = nil
  # in file lib/rexml/cdata.rb:7
  ILLEGAL = nil
  # in file lib/rexml/cdata.rb:38
  def value(); end

end

class REXML::Child # is documented

  attr_reader :parent # in file lib/rexml/child.rb:10
end

class REXML::Comment # is documented

  # in file lib/rexml/comment.rb:8
  START = nil
  # in file lib/rexml/comment.rb:9
  STOP = nil
  # in file lib/rexml/comment.rb:33
  def clone(); end

  # in file lib/rexml/comment.rb:75
  def node_type(); end

end


class REXML::DTD::AttlistDecl # is documented

  # in file lib/rexml/dtd/attlistdecl.rb:5
  START = nil
  # in file lib/rexml/dtd/attlistdecl.rb:6
  START_RE = nil
  # in file lib/rexml/dtd/attlistdecl.rb:7
  PATTERN_RE = nil
end

class REXML::DTD::ElementDecl # is documented

  # in file lib/rexml/dtd/elementdecl.rb:5
  START = nil
  # in file lib/rexml/dtd/elementdecl.rb:6
  START_RE = nil
  # in file lib/rexml/dtd/elementdecl.rb:7
  PATTERN_RE = nil
end

class REXML::DTD::EntityDecl # is documented

  # in file lib/rexml/dtd/entitydecl.rb:5
  START = nil
  # in file lib/rexml/dtd/entitydecl.rb:6
  START_RE = nil
  # in file lib/rexml/dtd/entitydecl.rb:7
  PUBLIC = nil
  # in file lib/rexml/dtd/entitydecl.rb:8
  SYSTEM = nil
  # in file lib/rexml/dtd/entitydecl.rb:9
  PLAIN = nil
  # in file lib/rexml/dtd/entitydecl.rb:10
  PERCENT = nil
  # in file lib/rexml/dtd/entitydecl.rb:49
  def self.parse_source(source, listener); end

  # in file lib/rexml/dtd/entitydecl.rb:44
  def write( output, indent ); end

end

class REXML::DTD::NotationDecl # is documented

  # in file lib/rexml/dtd/notationdecl.rb:5
  START = nil
  # in file lib/rexml/dtd/notationdecl.rb:6
  START_RE = nil
  # in file lib/rexml/dtd/notationdecl.rb:7
  PUBLIC = nil
  # in file lib/rexml/dtd/notationdecl.rb:8
  SYSTEM = nil
  # in file lib/rexml/dtd/notationdecl.rb:9
  def self.new(src); end

  # in file lib/rexml/dtd/notationdecl.rb:32
  def self.parse_source(source, listener); end

  # in file lib/rexml/dtd/notationdecl.rb:27
  def write( output, indent ); end

end

class REXML::DTD::Parser # is documented

  # in file lib/rexml/dtd/dtd.rb:11
  def self.parse( input ); end

end

class REXML::Declaration # is documented

  # in file lib/rexml/doctype.rb:203
  def self.new(src); end

end

class REXML::DocType # is documented

  # in file lib/rexml/doctype.rb:14
  START = nil
  # in file lib/rexml/doctype.rb:15
  STOP = nil
  # in file lib/rexml/doctype.rb:16
  SYSTEM = nil
  # in file lib/rexml/doctype.rb:17
  PUBLIC = nil
  # in file lib/rexml/doctype.rb:18
  DEFAULT_ENTITIES = nil
  # in file lib/rexml/doctype.rb:136
  def add(child); end

  # in file lib/rexml/doctype.rb:84
  def attribute_of(element, attribute); end

  # in file lib/rexml/doctype.rb:74
  def attributes_of(element); end

  # in file lib/rexml/doctype.rb:94
  def clone(); end

  # in file lib/rexml/doctype.rb:128
  def context(); end

  # in file lib/rexml/doctype.rb:132
  def entity( name ); end

  # in file lib/rexml/doctype.rb:70
  def node_type(); end

end

class REXML::Document # is documented

  attr_reader :entity_expansion_count # in file lib/rexml/document.rb:274
  # in file lib/rexml/document.rb:242
  def self.parse_stream( source, listener ); end

  # in file lib/rexml/document.rb:100
  def add_element(arg=nil, arg2=nil); end

  # in file lib/rexml/document.rb:47
  def node_type(); end

  # in file lib/rexml/document.rb:276
  def record_entity_expansion(); end

end

class REXML::Element # is documented

  # in file lib/rexml/element.rb:23
  UNDEFINED = nil
  # in file lib/rexml/element.rb:161
  def ignore_whitespace_nodes(); end

  # in file lib/rexml/element.rb:76
  def inspect(); end

  # in file lib/rexml/element.rb:202
  def namespaces(); end

  # in file lib/rexml/element.rb:534
  def node_type(); end

  # in file lib/rexml/element.rb:123
  def root(); end

  # in file lib/rexml/element.rb:538
  def xpath(); end

end

class REXML::ElementDecl # is documented

  # in file lib/rexml/doctype.rb:222
  def self.new( src ); end

end

class REXML::Elements # is documented

  # in file lib/rexml/element.rb:908
  def collect( xpath=nil ); end

  # in file lib/rexml/element.rb:916
  def inject( xpath=nil, initial=nil ); end

end

module REXML::Encoding # is documented

  # in file lib/rexml/encoding.rb:27
  def decode(string); end

  # in file lib/rexml/encoding.rb:23
  def encode(string); end

  # in file lib/rexml/encoding.rb:5
  def encoding=(encoding); end

end

class REXML::Entity # is documented

  # in file lib/rexml/entity.rb:10
  PUBIDCHAR = nil
  # in file lib/rexml/entity.rb:11
  SYSTEMLITERAL = nil
  # in file lib/rexml/entity.rb:12
  PUBIDLITERAL = nil
  # in file lib/rexml/entity.rb:13
  EXTERNALID = nil
  # in file lib/rexml/entity.rb:14
  NDATADECL = nil
  # in file lib/rexml/entity.rb:15
  PEREFERENCE = nil
  # in file lib/rexml/entity.rb:16
  ENTITYVALUE = nil
  # in file lib/rexml/entity.rb:17
  PEDEF = nil
  # in file lib/rexml/entity.rb:18
  ENTITYDEF = nil
  # in file lib/rexml/entity.rb:19
  PEDECL = nil
  # in file lib/rexml/entity.rb:20
  GEDECL = nil
  # in file lib/rexml/entity.rb:21
  ENTITYDECL = nil
  # in file lib/rexml/entity.rb:127
  PEREFERENCE_RE = nil
  attr_reader :name # in file lib/rexml/entity.rb:23
  attr_reader :external # in file lib/rexml/entity.rb:23
  attr_reader :ref # in file lib/rexml/entity.rb:23
  attr_reader :ndata # in file lib/rexml/entity.rb:23
  attr_reader :pubid # in file lib/rexml/entity.rb:23
end


class REXML::ExternalEntity # is documented

  # in file lib/rexml/doctype.rb:228
  def self.new( src ); end

  # in file lib/rexml/doctype.rb:235
  def write( output, indent ); end

end


class REXML::Formatters::Default # is documented

  # in file lib/rexml/formatters/default.rb:96
  def write_cdata( node, output ); end

  # in file lib/rexml/formatters/default.rb:90
  def write_comment( node, output ); end

  # in file lib/rexml/formatters/default.rb:59
  def write_document( node, output ); end

  # in file lib/rexml/formatters/default.rb:63
  def write_element( node, output ); end

  # in file lib/rexml/formatters/default.rb:102
  def write_instruction( node, output ); end

  # in file lib/rexml/formatters/default.rb:86
  def write_text( node, output ); end

end

class REXML::Formatters::Pretty # is documented

  # in file lib/rexml/formatters/pretty.rb:101
  def write_cdata( node, output); end

  # in file lib/rexml/formatters/pretty.rb:96
  def write_comment( node, output); end

  # in file lib/rexml/formatters/pretty.rb:106
  def write_document( node, output ); end

  # in file lib/rexml/formatters/pretty.rb:38
  def write_element(node, output); end

  # in file lib/rexml/formatters/pretty.rb:87
  def write_text( node, output ); end

end

class REXML::Formatters::Transitive # is documented

  # in file lib/rexml/formatters/transitive.rb:15
  def self.new( indentation=2, ie_hack=false ); end

  # in file lib/rexml/formatters/transitive.rb:22
  def write_element( node, output ); end

  # in file lib/rexml/formatters/transitive.rb:52
  def write_text( node, output ); end

end

module REXML::Functions # is documented

  # in file lib/rexml/parsers/xpathparser.rb:15
  namespace_context = nil
  # in file lib/rexml/xpath_parser.rb:61
  variables = nil
  # in file lib/rexml/functions.rb:373
  def self.ceiling( number ); end

  # in file lib/rexml/functions.rb:324
  def self.compare_language(lang1, lang2); end

  # in file lib/rexml/functions.rb:19
  def self.context=(value); end

  # in file lib/rexml/functions.rb:369
  def self.floor( number ); end

  # in file lib/rexml/functions.rb:389
  def self.method_missing( id ); end

  # in file lib/rexml/functions.rb:61
  def self.name( node_set=nil ); end

  # in file lib/rexml/functions.rb:16
  def self.namespace_context(); end

  # in file lib/rexml/functions.rb:14
  def self.namespace_context=(x); end

  # in file lib/rexml/functions.rb:57
  def self.namespace_uri( node_set=nil ); end

  # in file lib/rexml/functions.rb:36
  def self.position( ); end

  # in file lib/rexml/functions.rb:385
  def self.processing_instruction( node ); end

  # in file lib/rexml/functions.rb:377
  def self.round( number ); end

  # in file lib/rexml/functions.rb:364
  def self.sum( nodes ); end

  # in file lib/rexml/functions.rb:21
  def self.text( ); end

  # in file lib/rexml/functions.rb:17
  def self.variables(); end

  # in file lib/rexml/functions.rb:15
  def self.variables=(x); end

end

class REXML::IOSource # is documented

  # in file lib/rexml/source.rb:213
  def consume( pattern ); end

  # in file lib/rexml/source.rb:217
  def match( pattern, cons=false ); end

  # in file lib/rexml/source.rb:237
  def position(); end

  # in file lib/rexml/source.rb:205
  def read(); end

end

class REXML::Instruction # is documented

  # in file lib/rexml/instruction.rb:8
  START = nil
  # in file lib/rexml/instruction.rb:9
  STOP = nil
  # in file lib/rexml/instruction.rb:37
  def clone(); end

  # in file lib/rexml/instruction.rb:66
  def inspect(); end

  # in file lib/rexml/instruction.rb:62
  def node_type(); end

end


class REXML::Light::Node # is documented

  # in file lib/rexml/light/node.rb:17
  NAMESPLIT = nil
  # in file lib/rexml/light/node.rb:18
  PARENTS = nil
  # in file lib/rexml/light/node.rb:97
  def =~( path ); end

  # in file lib/rexml/light/node.rb:85
  def []( reference, ns=nil ); end

  # in file lib/rexml/light/node.rb:150
  def children(); end

  # in file lib/rexml/light/node.rb:43
  def each(); end

  # in file lib/rexml/light/node.rb:146
  def has_name?( name, namespace = '' ); end

  # in file lib/rexml/light/node.rb:61
  def local_name(); end

  # in file lib/rexml/light/node.rb:66
  def local_name=( name_str ); end

  # in file lib/rexml/light/node.rb:47
  def name(); end

  # in file lib/rexml/light/node.rb:51
  def name=( name_str, ns=nil ); end

  # in file lib/rexml/light/node.rb:74
  def namespace( prefix=prefix() ); end

  # in file lib/rexml/light/node.rb:78
  def namespace=( namespace ); end

  # in file lib/rexml/light/node.rb:132
  def node_type(); end

  # in file lib/rexml/light/node.rb:154
  def parent(); end

  # in file lib/rexml/light/node.rb:57
  def parent=( node ); end

  # in file lib/rexml/light/node.rb:70
  def prefix( namespace=nil ); end

  # in file lib/rexml/light/node.rb:141
  def root(); end

  # in file lib/rexml/light/node.rb:35
  def size(); end

  # in file lib/rexml/light/node.rb:136
  def text=( foo ); end

  # in file lib/rexml/light/node.rb:158
  def to_s(); end

end

module REXML::Namespace # is documented

  # in file lib/rexml/namespace.rb:11
  NAMESPLIT = nil
end

module REXML::Node # is documented

  # in file lib/rexml/node.rb:38
  def indent(to, ind); end

  # in file lib/rexml/node.rb:47
  def parent?(); end

end

class REXML::NotationDecl # is documented

  attr_accessor :public # in file lib/rexml/doctype.rb:241
  attr_accessor :system # in file lib/rexml/doctype.rb:241
  # in file lib/rexml/doctype.rb:242
  def self.new(name, middle, pub, sys); end

  # in file lib/rexml/doctype.rb:258
  def write( output, indent=-1 ); end

end

class REXML::Output # is documented

  # in file lib/rexml/output.rb:9
  def self.new(real_IO, encd="iso-8859-1"); end

  # in file lib/rexml/output.rb:21
  def <<( content ); end

  # in file lib/rexml/output.rb:25
  def to_s(); end

end

class REXML::Parent # is documented

  # in file lib/rexml/parent.rb
  def <<( object ); end

  # in file lib/rexml/parent.rb:17
  def add( object ); end

  # in file lib/rexml/parent.rb
  def children(); end

  # in file lib/rexml/parent.rb:33
  def delete( object ); end

  # in file lib/rexml/parent.rb:48
  def delete_at( index ); end

  # in file lib/rexml/parent.rb:44
  def delete_if( &block ); end

  # in file lib/rexml/parent.rb:40
  def each(&block); end

  # in file lib/rexml/parent.rb
  def each_child(&block); end

  # in file lib/rexml/parent.rb:52
  def each_index( &block ); end

  # in file lib/rexml/parent.rb:163
  def parent?(); end

  # in file lib/rexml/parent.rb
  def push( object ); end

  # in file lib/rexml/parent.rb:116
  def to_a(); end

  # in file lib/rexml/parent.rb:28
  def unshift( object ); end

end

class REXML::ParseException # is documented

  attr_accessor :source # in file lib/rexml/parseexception.rb:3
  attr_accessor :parser # in file lib/rexml/parseexception.rb:3
  attr_accessor :continued_exception # in file lib/rexml/parseexception.rb:3
  # in file lib/rexml/parseexception.rb:5
  def self.new( message, source=nil, parser=nil, exception=nil ); end

  # in file lib/rexml/parseexception.rb:47
  def context(); end

  # in file lib/rexml/parseexception.rb:42
  def line(); end

  # in file lib/rexml/parseexception.rb:37
  def position(); end

  # in file lib/rexml/parseexception.rb:12
  def to_s(); end

end


class REXML::Parsers::BaseParser # is documented

  # in file lib/rexml/parsers/baseparser.rb:28
  LETTER = nil
  # in file lib/rexml/parsers/baseparser.rb:29
  DIGIT = nil
  # in file lib/rexml/parsers/baseparser.rb:31
  COMBININGCHAR = nil
  # in file lib/rexml/parsers/baseparser.rb:32
  EXTENDER = nil
  # in file lib/rexml/parsers/baseparser.rb:34
  NCNAME_STR = nil
  # in file lib/rexml/parsers/baseparser.rb:35
  NAME_STR = nil
  # in file lib/rexml/parsers/baseparser.rb:36
  UNAME_STR = nil
  # in file lib/rexml/parsers/baseparser.rb:38
  NAMECHAR = nil
  # in file lib/rexml/parsers/baseparser.rb:39
  NAME = nil
  # in file lib/rexml/parsers/baseparser.rb:40
  NMTOKEN = nil
  # in file lib/rexml/parsers/baseparser.rb:41
  NMTOKENS = nil
  # in file lib/rexml/parsers/baseparser.rb:42
  REFERENCE = nil
  # in file lib/rexml/parsers/baseparser.rb:43
  REFERENCE_RE = nil
  # in file lib/rexml/parsers/baseparser.rb:45
  DOCTYPE_START = nil
  # in file lib/rexml/parsers/baseparser.rb:46
  DOCTYPE_PATTERN = nil
  # in file lib/rexml/parsers/baseparser.rb:47
  ATTRIBUTE_PATTERN = nil
  # in file lib/rexml/parsers/baseparser.rb:48
  COMMENT_START = nil
  # in file lib/rexml/parsers/baseparser.rb:49
  COMMENT_PATTERN = nil
  # in file lib/rexml/parsers/baseparser.rb:50
  CDATA_START = nil
  # in file lib/rexml/parsers/baseparser.rb:51
  CDATA_END = nil
  # in file lib/rexml/parsers/baseparser.rb:52
  CDATA_PATTERN = nil
  # in file lib/rexml/parsers/baseparser.rb:53
  XMLDECL_START = nil
  # in file lib/rexml/parsers/baseparser.rb:54
  XMLDECL_PATTERN = nil
  # in file lib/rexml/parsers/baseparser.rb:55
  INSTRUCTION_START = nil
  # in file lib/rexml/parsers/baseparser.rb:56
  INSTRUCTION_PATTERN = nil
  # in file lib/rexml/parsers/baseparser.rb:57
  TAG_MATCH = nil
  # in file lib/rexml/parsers/baseparser.rb:58
  CLOSE_MATCH = nil
  # in file lib/rexml/parsers/baseparser.rb:60
  VERSION = nil
  # in file lib/rexml/parsers/baseparser.rb:61
  ENCODING = nil
  # in file lib/rexml/parsers/baseparser.rb:62
  STANDALONE = nil
  # in file lib/rexml/parsers/baseparser.rb:64
  ENTITY_START = nil
  # in file lib/rexml/parsers/baseparser.rb:65
  IDENTITY = nil
  # in file lib/rexml/parsers/baseparser.rb:66
  ELEMENTDECL_START = nil
  # in file lib/rexml/parsers/baseparser.rb:67
  ELEMENTDECL_PATTERN = nil
  # in file lib/rexml/parsers/baseparser.rb:68
  SYSTEMENTITY = nil
  # in file lib/rexml/parsers/baseparser.rb:69
  ENUMERATION = nil
  # in file lib/rexml/parsers/baseparser.rb:70
  NOTATIONTYPE = nil
  # in file lib/rexml/parsers/baseparser.rb:71
  ENUMERATEDTYPE = nil
  # in file lib/rexml/parsers/baseparser.rb:72
  ATTTYPE = nil
  # in file lib/rexml/parsers/baseparser.rb:73
  ATTVALUE = nil
  # in file lib/rexml/parsers/baseparser.rb:74
  DEFAULTDECL = nil
  # in file lib/rexml/parsers/baseparser.rb:75
  ATTDEF = nil
  # in file lib/rexml/parsers/baseparser.rb:76
  ATTDEF_RE = nil
  # in file lib/rexml/parsers/baseparser.rb:77
  ATTLISTDECL_START = nil
  # in file lib/rexml/parsers/baseparser.rb:78
  ATTLISTDECL_PATTERN = nil
  # in file lib/rexml/parsers/baseparser.rb:79
  NOTATIONDECL_START = nil
  # in file lib/rexml/parsers/baseparser.rb:80
  PUBLIC = nil
  # in file lib/rexml/parsers/baseparser.rb:81
  SYSTEM = nil
  # in file lib/rexml/parsers/baseparser.rb:83
  TEXT_PATTERN = nil
  # in file lib/rexml/parsers/baseparser.rb:87
  SYSTEMLITERAL = nil
  # in file lib/rexml/parsers/baseparser.rb:88
  PUBIDLITERAL = nil
  # in file lib/rexml/parsers/baseparser.rb:89
  EXTERNALID = nil
  # in file lib/rexml/parsers/baseparser.rb:90
  NDATADECL = nil
  # in file lib/rexml/parsers/baseparser.rb:91
  PEREFERENCE = nil
  # in file lib/rexml/parsers/baseparser.rb:92
  ENTITYVALUE = nil
  # in file lib/rexml/parsers/baseparser.rb:93
  PEDEF = nil
  # in file lib/rexml/parsers/baseparser.rb:94
  ENTITYDEF = nil
  # in file lib/rexml/parsers/baseparser.rb:95
  PEDECL = nil
  # in file lib/rexml/parsers/baseparser.rb:96
  GEDECL = nil
  # in file lib/rexml/parsers/baseparser.rb:97
  ENTITYDECL = nil
  # in file lib/rexml/parsers/baseparser.rb:99
  EREFERENCE = nil
  # in file lib/rexml/parsers/baseparser.rb:101
  DEFAULT_ENTITIES = nil
  attr_reader :source # in file lib/rexml/parsers/baseparser.rb:124
  # in file lib/rexml/parsers/baseparser.rb:115
  def self.new( source ); end

  # in file lib/rexml/parsers/baseparser.rb:120
  def add_listener( listener ); end

  # in file lib/rexml/parsers/baseparser.rb:446
  def entity( reference, entities ); end

  # in file lib/rexml/parsers/baseparser.rb:136
  def position(); end

  # in file lib/rexml/parsers/baseparser.rb:126
  def stream=( source ); end

end

class REXML::Parsers::LightParser # is documented

  # in file lib/rexml/parsers/lightparser.rb:8
  def self.new(stream); end

  # in file lib/rexml/parsers/lightparser.rb:13
  def add_listener( listener ); end

  # in file lib/rexml/parsers/lightparser.rb:22
  def parse(); end

  # in file lib/rexml/parsers/lightparser.rb:17
  def rewind(); end

end

class REXML::Parsers::PullEvent # is documented

  # in file lib/rexml/parsers/pullparser.rb:98
  def []( start, endd=nil); end

  # in file lib/rexml/parsers/pullparser.rb:187
  def error?(); end

  # in file lib/rexml/parsers/pullparser.rb:112
  def event_type(); end

  # in file lib/rexml/parsers/pullparser.rb:191
  def inspect(); end

end

class REXML::Parsers::PullParser # is documented

  # in file lib/rexml/parsers/pullparser.rb:37
  def self.new(stream); end

  # in file lib/rexml/parsers/pullparser.rb:44
  def add_listener( listener ); end

  # in file lib/rexml/parsers/pullparser.rb:49
  def each(); end

  # in file lib/rexml/parsers/pullparser.rb:55
  def peek(depth=0); end

  # in file lib/rexml/parsers/pullparser.rb:65
  def pull(); end

  # in file lib/rexml/parsers/pullparser.rb:80
  def unshift(token); end

end

class REXML::Parsers::SAX2Parser # is documented

  # in file lib/rexml/parsers/sax2parser.rb:10
  def self.new(source); end

  # in file lib/rexml/parsers/sax2parser.rb:24
  def add_listener( listener ); end

  # in file lib/rexml/parsers/sax2parser.rb:76
  def deafen( listener=nil, &blok ); end

  # in file lib/rexml/parsers/sax2parser.rb:85
  def parse(); end

  # in file lib/rexml/parsers/sax2parser.rb:20
  def source(); end

end

class REXML::Parsers::StreamParser # is documented

  # in file lib/rexml/parsers/streamparser.rb:4
  def self.new(source, listener); end

  # in file lib/rexml/parsers/streamparser.rb:9
  def add_listener( listener ); end

  # in file lib/rexml/parsers/streamparser.rb:13
  def parse(); end

end

class REXML::Parsers::TreeParser # is documented

  # in file lib/rexml/parsers/treeparser.rb:7
  def self.new( source, build_context = Document.new ); end

  # in file lib/rexml/parsers/treeparser.rb:12
  def add_listener( listener ); end

  # in file lib/rexml/parsers/treeparser.rb:16
  def parse(); end

end

class REXML::Parsers::UltraLightParser # is documented

  # in file lib/rexml/parsers/ultralightparser.rb:7
  def self.new(stream); end

  # in file lib/rexml/parsers/ultralightparser.rb:12
  def add_listener( listener ); end

  # in file lib/rexml/parsers/ultralightparser.rb:21
  def parse(); end

  # in file lib/rexml/parsers/ultralightparser.rb:16
  def rewind(); end

end

class REXML::Parsers::XPathParser # is documented

  # in file lib/rexml/parsers/xpathparser.rb:12
  LITERAL = nil
  # in file lib/rexml/parsers/xpathparser.rb:281
  QNAME = nil
  # in file lib/rexml/parsers/xpathparser.rb:282
  NODE_TYPE = nil
  # in file lib/rexml/parsers/xpathparser.rb:283
  PI = nil
  # in file lib/rexml/parsers/xpathparser.rb:578
  NUMBER = nil
  # in file lib/rexml/parsers/xpathparser.rb:579
  NT = nil
  # in file lib/rexml/parsers/xpathparser.rb:34
  def abbreviate( path ); end

  # in file lib/rexml/parsers/xpathparser.rb:92
  def expand( path ); end

  # in file lib/rexml/parsers/xpathparser.rb:14
  def namespaces=( namespaces ); end

  # in file lib/rexml/parsers/xpathparser.rb:19
  def parse(path); end

  # in file lib/rexml/parsers/xpathparser.rb:28
  def predicate(path); end

  # in file lib/rexml/parsers/xpathparser.rb:131
  def predicate_to_string( path, &block ); end

end

class REXML::QuickPath # is documented

  # in file lib/rexml/quickpath.rb:143
  OPERAND_ = nil
  # in file lib/rexml/quickpath.rb:205
  def self.attribute( name ); end

  # in file lib/rexml/quickpath.rb:105
  def self.axe( elements, axe_name, rest ); end

  # in file lib/rexml/quickpath.rb:17
  def self.each(element, path, namespaces=EMPTY_HASH, &block); end

  # in file lib/rexml/quickpath.rb:13
  def self.first(element, path, namespaces=EMPTY_HASH); end

  # in file lib/rexml/quickpath.rb:221
  def self.function( elements, fname, rest ); end

  # in file lib/rexml/quickpath.rb:22
  def self.match(element, path, namespaces=EMPTY_HASH); end

  # in file lib/rexml/quickpath.rb:213
  def self.method_missing( id, *args ); end

  # in file lib/rexml/quickpath.rb:209
  def self.name(); end

  # in file lib/rexml/quickpath.rb:239
  def self.parse_args( element, string ); end

end

module REXML::SAX2Listener # is documented

  # in file lib/rexml/sax2listener.rb:35
  def characters(text); end

  # in file lib/rexml/sax2listener.rb:25
  def end_document(); end

  # in file lib/rexml/sax2listener.rb:33
  def end_element(uri, localname, qname); end

  # in file lib/rexml/sax2listener.rb:29
  def end_prefix_mapping(prefix); end

  # in file lib/rexml/sax2listener.rb:37
  def processing_instruction(target, data); end

  # in file lib/rexml/sax2listener.rb:94
  def progress(position); end

  # in file lib/rexml/sax2listener.rb:23
  def start_document(); end

  # in file lib/rexml/sax2listener.rb:31
  def start_element(uri, localname, qname, attributes); end

  # in file lib/rexml/sax2listener.rb:27
  def start_prefix_mapping(prefix, uri); end

end

class REXML::Source # is documented

  # in file lib/rexml/source.rb:85
  def consume( pattern ); end

  # in file lib/rexml/source.rb:99
  def match(pattern, cons=false); end

  # in file lib/rexml/source.rb:89
  def match_to( char, pattern ); end

  # in file lib/rexml/source.rb:93
  def match_to_consume( char, pattern ); end

  # in file lib/rexml/source.rb:110
  def position(); end

  # in file lib/rexml/source.rb:82
  def read(); end

end




class REXML::Text # is documented

  # in file lib/rexml/text.rb:14
  SUBSTITUTES = nil
  # in file lib/rexml/text.rb:17
  SETUTITSBUS = nil
  # in file lib/rexml/text.rb:22
  NEEDS_A_SECOND_CHECK = nil
  # in file lib/rexml/text.rb:23
  NUMERICENTITY = nil
  # in file lib/rexml/text.rb:24
  VALID_CHAR = nil
  # in file lib/rexml/text.rb:32
  VALID_XML_CHARS = nil
  # in file lib/rexml/text.rb:207
  REFERENCE = nil
  # in file lib/rexml/text.rb:359
  EREFERENCE = nil
  # in file lib/rexml/text.rb:396
  def self.expand(ref, doctype, filter); end

  # in file lib/rexml/text.rb:182
  def clone(); end

  # in file lib/rexml/text.rb:200
  def doctype(); end

  # in file lib/rexml/text.rb:177
  def empty?(); end

  # in file lib/rexml/text.rb:275
  def indent_text(string, level=1, style="\t", indentfirstline=true); end

  # in file lib/rexml/text.rb:228
  def inspect(); end

  # in file lib/rexml/text.rb:173
  def node_type(); end

  # in file lib/rexml/text.rb:264
  def wrap(string, width, addnewline=false); end

end

class REXML::UndefinedNamespaceException # is documented

  # in file lib/rexml/undefinednamespaceexception.rb:4
  def self.new( prefix, source, parser ); end

end


class REXML::Validation::Choice # is documented

  # in file lib/rexml/validation/relaxng.rb:363
  def self.new(context); end

  # in file lib/rexml/validation/relaxng.rb:374
  def <<( event ); end

  # in file lib/rexml/validation/relaxng.rb:429
  def add_event_to_arry( arry, evt ); end

  # in file lib/rexml/validation/relaxng.rb:411
  def expected(); end

  # in file lib/rexml/validation/relaxng.rb:424
  def inspect(); end

  # in file lib/rexml/validation/relaxng.rb:406
  def matches?( event ); end

  # in file lib/rexml/validation/relaxng.rb:378
  def next( event ); end

  # in file lib/rexml/validation/relaxng.rb:368
  def reset(); end

end

class REXML::Validation::Event # is documented

  attr_reader :event_type # in file lib/rexml/validation/validation.rb:85
  attr_accessor :event_arg # in file lib/rexml/validation/validation.rb:86
  # in file lib/rexml/validation/validation.rb:80
  def self.new(event_type, event_arg=nil ); end

  # in file lib/rexml/validation/validation.rb:141
  def ==( other ); end

  # in file lib/rexml/validation/validation.rb:88
  def done?(); end

  # in file lib/rexml/validation/validation.rb:150
  def inspect(); end

  # in file lib/rexml/validation/validation.rb:96
  def matches?( event ); end

  # in file lib/rexml/validation/validation.rb:92
  def single?(); end

  # in file lib/rexml/validation/validation.rb:146
  def to_s(); end

end

class REXML::Validation::Interleave # is documented

  # in file lib/rexml/validation/relaxng.rb:449
  def self.new(context); end

  # in file lib/rexml/validation/relaxng.rb:529
  def expected(); end

  # in file lib/rexml/validation/relaxng.rb:542
  def inspect(); end

  # in file lib/rexml/validation/relaxng.rb:524
  def matches?( event ); end

  # in file lib/rexml/validation/relaxng.rb:488
  def next( event ); end

  # in file lib/rexml/validation/relaxng.rb:458
  def next_current( event ); end

  # in file lib/rexml/validation/relaxng.rb:454
  def reset(); end

end

class REXML::Validation::OneOrMore # is documented

  # in file lib/rexml/validation/relaxng.rb:316
  def self.new(context); end

  # in file lib/rexml/validation/relaxng.rb:352
  def expected(); end

  # in file lib/rexml/validation/relaxng.rb:347
  def matches?( event ); end

  # in file lib/rexml/validation/relaxng.rb:326
  def next( event ); end

  # in file lib/rexml/validation/relaxng.rb:321
  def reset(); end

end

class REXML::Validation::Optional # is documented

  # in file lib/rexml/validation/relaxng.rb:279
  def expected(); end

  # in file lib/rexml/validation/relaxng.rb:274
  def matches?(event); end

  # in file lib/rexml/validation/relaxng.rb:264
  def next( event ); end

end

class REXML::Validation::Ref # is documented

  # in file lib/rexml/validation/relaxng.rb:548
  def self.new(value); end

  # in file lib/rexml/validation/relaxng.rb:554
  def inspect(); end

  # in file lib/rexml/validation/relaxng.rb:551
  def to_s(); end

end

class REXML::Validation::RelaxNG # is documented

  # in file lib/rexml/validation/relaxng.rb:37
  INFINITY = nil
  # in file lib/rexml/validation/relaxng.rb:38
  EMPTY = nil
  # in file lib/rexml/validation/relaxng.rb:39
  TEXT = nil
  attr_accessor :current # in file lib/rexml/validation/relaxng.rb:40
  attr_accessor :count # in file lib/rexml/validation/relaxng.rb:41
  attr_reader :references # in file lib/rexml/validation/relaxng.rb:42
  # in file lib/rexml/validation/relaxng.rb:121
  def receive(event); end

end

class REXML::Validation::Sequence # is documented

  # in file lib/rexml/validation/relaxng.rb:257
  def matches?(event); end

end

class REXML::Validation::State # is documented

  # in file lib/rexml/validation/relaxng.rb:127
  def self.new( context ); end

  # in file lib/rexml/validation/relaxng.rb:196
  def <<( event ); end

  # in file lib/rexml/validation/relaxng.rb:210
  def add_event_to_arry( arry, evt ); end

  # in file lib/rexml/validation/relaxng.rb:202
  def expand_ref_in( arry, ind ); end

  # in file lib/rexml/validation/relaxng.rb:192
  def expected(); end

  # in file lib/rexml/validation/relaxng.rb:220
  def generate_event( event ); end

  # in file lib/rexml/validation/relaxng.rb:185
  def inspect(); end

  # in file lib/rexml/validation/relaxng.rb:146
  def next( event ); end

  # in file lib/rexml/validation/relaxng.rb:142
  def previous=( previous ); end

  # in file lib/rexml/validation/relaxng.rb:136
  def reset(); end

  # in file lib/rexml/validation/relaxng.rb:177
  def to_s(); end

end

class REXML::Validation::ValidationException # is documented

  # in file lib/rexml/validation/validationexception.rb:4
  def self.new(msg); end

end

module REXML::Validation::Validator # is documented

  # in file lib/rexml/validation/validation.rb:6
  NILEVENT = nil
  # in file lib/rexml/validation/validation.rb:14
  def dump(); end

  # in file lib/rexml/validation/validation.rb:7
  def reset(); end

  # in file lib/rexml/validation/validation.rb:17
  def validate( event ); end

end

class REXML::Validation::ZeroOrMore # is documented

  # in file lib/rexml/validation/relaxng.rb:308
  def expected(); end

  # in file lib/rexml/validation/relaxng.rb:287
  def next( event ); end

end

class REXML::XMLDecl # is documented

  # in file lib/rexml/xmldecl.rb:9
  DEFAULT_VERSION = nil
  # in file lib/rexml/xmldecl.rb:10
  DEFAULT_ENCODING = nil
  # in file lib/rexml/xmldecl.rb:11
  DEFAULT_STANDALONE = nil
  # in file lib/rexml/xmldecl.rb:12
  START = nil
  # in file lib/rexml/xmldecl.rb:13
  STOP = nil
  attr_accessor :version # in file lib/rexml/xmldecl.rb:15
  attr_accessor :standalone # in file lib/rexml/xmldecl.rb:15
  attr_reader :writeencoding # in file lib/rexml/xmldecl.rb:16
  attr_reader :writethis # in file lib/rexml/xmldecl.rb:16
  attr_accessor :stand_alone? # in file lib/rexml/xmldecl.rb
  # in file lib/rexml/xmldecl.rb:18
  def self.new(version=DEFAULT_VERSION, encoding=nil, standalone=nil); end

  # in file lib/rexml/xmldecl.rb:53
  def ==( other ); end

  # in file lib/rexml/xmldecl.rb:36
  def clone(); end

  # in file lib/rexml/xmldecl.rb:99
  def dowrite(); end

  # in file lib/rexml/xmldecl.rb:73
  def encoding=( enc ); end

  # in file lib/rexml/xmldecl.rb:103
  def inspect(); end

  # in file lib/rexml/xmldecl.rb:66
  def node_type(); end

  # in file lib/rexml/xmldecl.rb:95
  def nowrite(); end

  # in file lib/rexml/xmldecl.rb
  def old_enc=( enc ); end

  # in file lib/rexml/xmldecl.rb:60
  def xmldecl(version, encoding, standalone); end

end

module REXML::XMLTokens # is documented

  # in file lib/rexml/xmltokens.rb:5
  NCNAME_STR = nil
  # in file lib/rexml/xmltokens.rb:6
  NAME_STR = nil
  # in file lib/rexml/xmltokens.rb:8
  NAMECHAR = nil
  # in file lib/rexml/xmltokens.rb:9
  NAME = nil
  # in file lib/rexml/xmltokens.rb:10
  NMTOKEN = nil
  # in file lib/rexml/xmltokens.rb:11
  NMTOKENS = nil
  # in file lib/rexml/xmltokens.rb:12
  REFERENCE = nil
end


class REXML::XPathParser # is documented

  # in file lib/rexml/xpath_parser.rb:47
  LITERAL = nil
  # in file lib/rexml/xpath_parser.rb:165
  ELEMENTS = nil
  # in file lib/rexml/xpath_parser.rb:49
  def self.new( ); end

  # in file lib/rexml/xpath_parser.rb:86
  def []=( variable_name, value ); end

  # in file lib/rexml/xpath_parser.rb:73
  def get_first(path, nodeset); end

  # in file lib/rexml/xpath_parser.rb:136
  def match( path_stack, nodeset ); end

  # in file lib/rexml/xpath_parser.rb:55
  def namespaces=( namespaces={} ); end

  # in file lib/rexml/xpath_parser.rb:65
  def parse(path, nodeset); end

  # in file lib/rexml/xpath_parser.rb:81
  def predicate(path, nodeset); end

  # in file lib/rexml/xpath_parser.rb:60
  def variables=( vars={} ); end

end

module RSS # is documented

  # in file lib/rss/content.rb:4
  CONTENT_PREFIX = nil
  # in file lib/rss/content.rb:5
  CONTENT_URI = nil
  # in file lib/rss/dublincore.rb:4
  DC_PREFIX = nil
  # in file lib/rss/dublincore.rb:5
  DC_URI = nil
  # in file lib/rss/image.rb:6
  IMAGE_PREFIX = nil
  # in file lib/rss/image.rb:7
  IMAGE_URI = nil
  # in file lib/rss/image.rb:11
  IMAGE_ELEMENTS = nil
  # in file lib/rss/itunes.rb:4
  ITUNES_PREFIX = nil
  # in file lib/rss/itunes.rb:5
  ITUNES_URI = nil
  # in file lib/rss/parser.rb:548
  AVAILABLE_PARSER_LIBRARIES = nil
  # in file lib/rss/parser.rb:555
  AVAILABLE_PARSERS = nil
  # in file lib/rss/rss.rb:56
  VERSION = nil
  # in file lib/rss/rss.rb:58
  URI = nil
  # in file lib/rss/rss.rb:60
  DEBUG = nil
  # in file lib/rss/slash.rb:4
  SLASH_PREFIX = nil
  # in file lib/rss/slash.rb:5
  SLASH_URI = nil
  # in file lib/rss/syndication.rb:5
  SY_PREFIX = nil
  # in file lib/rss/syndication.rb:6
  SY_URI = nil
  # in file lib/rss/taxonomy.rb:6
  TAXO_PREFIX = nil
  # in file lib/rss/taxonomy.rb:7
  TAXO_URI = nil
  # in file lib/rss/taxonomy.rb:11
  TAXO_ELEMENTS = nil
  # in file lib/rss/trackback.rb:6
  TRACKBACK_PREFIX = nil
  # in file lib/rss/trackback.rb:7
  TRACKBACK_URI = nil
end


module RSS::Atom::CommonModel # is documented

  # in file lib/rss/atom.rb:17
  NSPOOL = nil
  # in file lib/rss/atom.rb:18
  ELEMENTS = nil
  # in file lib/rss/atom.rb:20
  def self.append_features(klass); end

  # in file lib/rss/atom.rb:35
  def self.need_parent?(); end

  # in file lib/rss/atom.rb:31
  def self.required_uri(); end

end

module RSS::Atom::ContentModel # is documented

  # in file lib/rss/atom.rb:51
  def self.append_features(klass); end

  # in file lib/rss/atom.rb:58
  def maker_target(target); end

end

module RSS::Atom::ContentModel::ClassMethods # is documented

  # in file lib/rss/atom.rb:45
  def content_type(); end

end

module RSS::Atom::DateConstruct # is documented

  # in file lib/rss/atom.rb:186
  def self.append_features(klass); end

  # in file lib/rss/atom.rb:194
  def atom_validate(ignore_unknown_element, tags, uri); end

end

module RSS::Atom::DuplicateLinkChecker # is documented

  # in file lib/rss/atom.rb:200
  def validate_duplicate_links(links); end

end

class RSS::Atom::Entry # is documented

  # in file lib/rss/atom.rb:705
  Author = nil
  # in file lib/rss/atom.rb:706
  Category = nil
  # in file lib/rss/atom.rb:707
  Content = nil
  # in file lib/rss/atom.rb:708
  Contributor = nil
  # in file lib/rss/atom.rb:709
  Id = nil
  # in file lib/rss/atom.rb:710
  Link = nil
  # in file lib/rss/atom.rb:711
  Published = nil
  # in file lib/rss/atom.rb:712
  Rights = nil
  # in file lib/rss/atom.rb:713
  Source = nil
  # in file lib/rss/atom.rb:714
  Summary = nil
  # in file lib/rss/atom.rb:715
  Title = nil
  # in file lib/rss/atom.rb:716
  Updated = nil
  # in file lib/rss/atom.rb:669
  def self.new(version=nil, encoding=nil, standalone=nil); end

  # in file lib/rss/atom.rb:684
  def have_author?(); end

  # in file lib/rss/atom.rb:675
  def items(); end

  # in file lib/rss/atom.rb:679
  def setup_maker(maker); end

end

class RSS::Atom::Feed # is documented

  # in file lib/rss/atom.rb:241
  def self.new(version=nil, encoding=nil, standalone=nil); end

  # in file lib/rss/atom.rb:249
  def have_author?(); end

end




class RSS::Atom::Feed::Entry # is documented

  # in file lib/rss/atom.rb:445
  Author = nil
  # in file lib/rss/atom.rb:446
  Category = nil
  # in file lib/rss/atom.rb:584
  Contributor = nil
  # in file lib/rss/atom.rb:585
  Id = nil
  # in file lib/rss/atom.rb:586
  Link = nil
  # in file lib/rss/atom.rb:593
  Rights = nil
  # in file lib/rss/atom.rb:640
  Title = nil
  # in file lib/rss/atom.rb:641
  Updated = nil
  # in file lib/rss/atom.rb:419
  def have_author?(check_parent=true); end

end

class RSS::Atom::Feed::Entry::Content # is documented

  attr_writer :xml # in file lib/rss/atom.rb:471
  # in file lib/rss/atom.rb:456
  def self.xml_getter(); end

  # in file lib/rss/atom.rb:452
  def self.xml_setter(); end

  # in file lib/rss/atom.rb:498
  def atom_validate(ignore_unknown_element, tags, uri); end

  # in file lib/rss/atom.rb:472
  def have_xml_content?(); end

  # in file lib/rss/atom.rb:518
  def inline_html?(); end

  # in file lib/rss/atom.rb:527
  def inline_other?(); end

  # in file lib/rss/atom.rb:557
  def inline_other_base64?(); end

  # in file lib/rss/atom.rb:534
  def inline_other_text?(); end

  # in file lib/rss/atom.rb:543
  def inline_other_xml?(); end

  # in file lib/rss/atom.rb:514
  def inline_text?(); end

  # in file lib/rss/atom.rb:523
  def inline_xhtml?(); end

  # in file lib/rss/atom.rb:565
  def mime_split(); end

  # in file lib/rss/atom.rb:574
  def need_base64_encode?(); end

  # in file lib/rss/atom.rb:561
  def out_of_line?(); end

  # in file lib/rss/atom.rb:490
  def xhtml(); end

  # in file lib/rss/atom.rb:476
  def xml(); end

end


class RSS::Atom::Feed::Entry::Source # is documented

  # in file lib/rss/atom.rb:621
  Author = nil
  # in file lib/rss/atom.rb:622
  Category = nil
  # in file lib/rss/atom.rb:623
  Contributor = nil
  # in file lib/rss/atom.rb:624
  Generator = nil
  # in file lib/rss/atom.rb:625
  Icon = nil
  # in file lib/rss/atom.rb:626
  Id = nil
  # in file lib/rss/atom.rb:627
  Link = nil
  # in file lib/rss/atom.rb:628
  Logo = nil
  # in file lib/rss/atom.rb:629
  Rights = nil
  # in file lib/rss/atom.rb:630
  Subtitle = nil
  # in file lib/rss/atom.rb:631
  Title = nil
  # in file lib/rss/atom.rb:632
  Updated = nil
  # in file lib/rss/atom.rb:617
  def have_author?(); end

end

class RSS::Atom::Feed::Logo # is documented

  # in file lib/rss/atom.rb:366
  def maker_target(target); end

end


module RSS::Atom::PersonConstruct # is documented

  # in file lib/rss/atom.rb:152
  def self.append_features(klass); end

  # in file lib/rss/atom.rb:165
  def maker_target(target); end

end


module RSS::Atom::TextConstruct # is documented

  attr_writer :xhtml # in file lib/rss/atom.rb:110
  # in file lib/rss/atom.rb:86
  def self.append_features(klass); end

  # in file lib/rss/atom.rb:99
  def self.xml_getter(); end

  # in file lib/rss/atom.rb:103
  def self.xml_setter(); end

  # in file lib/rss/atom.rb:128
  def atom_validate(ignore_unknown_element, tags, uri); end

  # in file lib/rss/atom.rb:124
  def have_xml_content?(); end

  # in file lib/rss/atom.rb:111
  def xhtml(); end

end

module RSS::Atom::URIContentModel # is documented

  # in file lib/rss/atom.rb:75
  def self.append_features(klass); end

end

module RSS::BaseDublinCoreModel # is documented

  # in file lib/rss/dublincore.rb:8
  def append_features(klass); end

end

class RSS::BaseListener # is documented

  # in file lib/rss/parser.rb:191
  def self.getter(uri, tag_name); end

  # in file lib/rss/parser.rb:227
  def self.install_get_text_element(uri, name, accessor_base); end

  # in file lib/rss/parser.rb:232
  def self.raise_for_undefined_entity?(); end

end

module RSS::BaseModel # is documented

  # in file lib/rss/rss.rb:271
  def install_date_element(tag_name, uri, occurs, name=nil, type=nil, disp_name=nil); end

  # in file lib/rss/rss.rb
  def install_have_attribute_element(tag_name, uri, occurs, name=nil, type=nil); end

  # in file lib/rss/rss.rb:197
  def install_have_child_element(tag_name, uri, occurs, name=nil, type=nil); end

  # in file lib/rss/rss.rb:217
  def install_have_children_element(tag_name, uri, occurs, name=nil, plural_name=nil); end

  # in file lib/rss/rss.rb:237
  def install_text_element(tag_name, uri, occurs, name=nil, type=nil, disp_name=nil); end

end

class RSS::BaseParser # is documented

  # in file lib/rss/parser.rb:137
  def self.new(rss); end

  # in file lib/rss/parser.rb:132
  def self.raise_for_undefined_entity?(); end

  # in file lib/rss/parser.rb:154
  def do_validate(); end

  # in file lib/rss/parser.rb:158
  def do_validate=(new_value); end

  # in file lib/rss/parser.rb:146
  def ignore_unknown_element(); end

  # in file lib/rss/parser.rb:150
  def ignore_unknown_element=(new_value); end

  # in file lib/rss/parser.rb:162
  def parse(); end

  # in file lib/rss/parser.rb:142
  def rss(); end

end

module RSS::BaseTrackBackModel # is documented

  # in file lib/rss/trackback.rb:25
  ELEMENTS = nil
  # in file lib/rss/trackback.rb:27
  def append_features(klass); end

end

module RSS::ContentModel # is documented

  # in file lib/rss/content.rb:10
  ELEMENTS = nil
  # in file lib/rss/content.rb:12
  def self.append_features(klass); end

end

class RSS::ConversionError # is documented

  attr_reader :string # in file lib/rss/rss.rb:162
  attr_reader :to # in file lib/rss/rss.rb:162
  attr_reader :from # in file lib/rss/rss.rb:162
  # in file lib/rss/rss.rb:163
  def self.new(string, to, from); end

end

class RSS::Converter # is documented

  # in file lib/rss/converter.rb:9
  def self.new(to_enc, from_enc=nil); end

  # in file lib/rss/converter.rb:29
  def convert(value); end

  # in file lib/rss/converter.rb:37
  def def_convert(depth=0); end

  # in file lib/rss/converter.rb:67
  def def_else_enc(to_enc, from_enc); end

  # in file lib/rss/converter.rb:49
  def def_iconv_convert(to_enc, from_enc, depth=0); end

  # in file lib/rss/converter.rb:71
  def def_same_enc(); end

  # in file lib/rss/converter.rb:131
  def def_to_euc_jp_from_iso_2022_jp(); end

  # in file lib/rss/converter.rb:117
  def def_to_euc_jp_from_shift_jis(); end

  # in file lib/rss/converter.rb:101
  def def_to_euc_jp_from_utf_8(); end

  # in file lib/rss/converter.rb:138
  def def_to_iso_2022_jp_from_euc_jp(); end

  # in file lib/rss/converter.rb:151
  def def_to_iso_8859_1_from_utf_8(); end

  # in file lib/rss/converter.rb:124
  def def_to_shift_jis_from_euc_jp(); end

  # in file lib/rss/converter.rb:109
  def def_to_shift_jis_from_utf_8(); end

  # in file lib/rss/converter.rb:105
  def def_to_utf_8_from_euc_jp(); end

  # in file lib/rss/converter.rb:145
  def def_to_utf_8_from_iso_8859_1(); end

  # in file lib/rss/converter.rb:113
  def def_to_utf_8_from_shift_jis(); end

  # in file lib/rss/converter.rb:77
  def def_uconv_convert_if_can(meth, to_enc, from_enc, nkf_arg); end

end

module RSS::DublinCoreModel # is documented

  # in file lib/rss/dublincore.rb:59
  TEXT_ELEMENTS = nil
  # in file lib/rss/dublincore.rb:76
  DATE_ELEMENTS = nil
  # in file lib/rss/dublincore.rb:80
  ELEMENT_NAME_INFOS = nil
  # in file lib/rss/dublincore.rb:85
  ELEMENTS = nil
end

module RSS::DublincoreModel # is documented

  # in file lib/rss/dublincore.rb:59
  TEXT_ELEMENTS = nil
  # in file lib/rss/dublincore.rb:76
  DATE_ELEMENTS = nil
  # in file lib/rss/dublincore.rb:80
  ELEMENT_NAME_INFOS = nil
  # in file lib/rss/dublincore.rb:85
  ELEMENTS = nil
end

class RSS::Element # is documented

  # in file lib/rss/rss.rb:666
  INDENT = nil
  # in file lib/rss/rss.rb:668
  MUST_CALL_VALIDATORS = nil
  # in file lib/rss/rss.rb:669
  MODELS = nil
  # in file lib/rss/rss.rb:670
  GET_ATTRIBUTES = nil
  # in file lib/rss/rss.rb:671
  HAVE_CHILDREN_ELEMENTS = nil
  # in file lib/rss/rss.rb:672
  TO_ELEMENT_METHODS = nil
  # in file lib/rss/rss.rb:673
  NEED_INITIALIZE_VARIABLES = nil
  # in file lib/rss/rss.rb:674
  PLURAL_FORMS = nil
  attr_accessor :parent # in file lib/rss/rss.rb:844
  attr_accessor :do_validate # in file lib/rss/rss.rb:844
  # in file lib/rss/rss.rb:804
  def self.add_have_children_element(variable_name, plural_name); end

  # in file lib/rss/rss.rb:812
  def self.add_need_initialize_variable(variable_name); end

  # in file lib/rss/rss.rb:816
  def self.add_plural_form(singular, plural); end

  # in file lib/rss/rss.rb:808
  def self.add_to_element_method(method_name); end

  # in file lib/rss/rss.rb:793
  def self.content_setup(type=nil, disp_name=nil); end

  # in file lib/rss/rss.rb:774
  def self.def_corresponded_attr_reader(name, type=nil); end

  # in file lib/rss/rss.rb:746
  def self.def_corresponded_attr_writer(name, type=nil, disp_name=nil); end

  # in file lib/rss/rss.rb:683
  def self.get_attributes(); end

  # in file lib/rss/rss.rb:686
  def self.have_children_elements(); end

  # in file lib/rss/rss.rb:800
  def self.have_content?(); end

  # in file lib/rss/rss.rb:703
  def self.inherited(klass); end

  # in file lib/rss/rss.rb:699
  def self.inherited_base(); end

  # in file lib/rss/rss.rb:731
  def self.install_get_attribute(name, uri, required=true, type=nil, disp_name=nil, element_name=nil); end

  # in file lib/rss/rss.rb:722
  def self.install_model(tag, uri, occurs=nil, getter=nil, plural=false); end

  # in file lib/rss/rss.rb:718
  def self.install_must_call_validator(prefix, uri); end

  # in file lib/rss/rss.rb:832
  def self.install_ns(prefix, uri); end

  # in file lib/rss/rss.rb:680
  def self.models(); end

  # in file lib/rss/rss.rb:677
  def self.must_call_validators(); end

  # in file lib/rss/rss.rb:692
  def self.need_initialize_variables(); end

  # in file lib/rss/rss.rb:828
  def self.need_parent?(); end

  # in file lib/rss/rss.rb:846
  def self.new(do_validate=true, attrs=nil); end

  # in file lib/rss/rss.rb:695
  def self.plural_forms(); end

  # in file lib/rss/rss.rb:820
  def self.required_prefix(); end

  # in file lib/rss/rss.rb:824
  def self.required_uri(); end

  # in file lib/rss/rss.rb:839
  def self.tag_name(); end

  # in file lib/rss/rss.rb:689
  def self.to_element_methods(); end

  # in file lib/rss/rss.rb:875
  def convert(value); end

  # in file lib/rss/rss.rb:864
  def converter=(converter); end

  # in file lib/rss/rss.rb:860
  def full_name(); end

  # in file lib/rss/rss.rb:947
  def have_required_elements?(); end

  # in file lib/rss/rss.rb:925
  def have_xml_content?(); end

  # in file lib/rss/rss.rb:929
  def need_base64_encode?(); end

  # in file lib/rss/rss.rb:933
  def set_next_element(tag_name, next_element); end

  # in file lib/rss/rss.rb:856
  def tag_name(); end

  # in file lib/rss/rss.rb:904
  def to_s(need_convert=true, indent=''); end

  # in file lib/rss/rss.rb:883
  def valid?(ignore_unknown_element=true); end

  # in file lib/rss/rss.rb:890
  def validate(ignore_unknown_element=true); end

  # in file lib/rss/rss.rb:899
  def validate_for_stream(tags, ignore_unknown_element=true); end

end


module RSS::ITunesBaseModel # is documented

  # in file lib/rss/itunes.rb:47
  ELEMENTS = nil
  # in file lib/rss/itunes.rb:49
  ELEMENT_INFOS = nil
end

module RSS::ITunesChannelModel # is documented

  # in file lib/rss/itunes.rb:62
  ELEMENTS = nil
  # in file lib/rss/itunes.rb:75
  ELEMENT_INFOS = nil
  # in file lib/rss/itunes.rb:65
  def self.append_features(klass); end

end

class RSS::ITunesChannelModel::ITunesCategory # is documented

  # in file lib/rss/itunes.rb:103
  ITunesCategory = nil
  # in file lib/rss/itunes.rb:108
  def self.new(*args); end

  # in file lib/rss/itunes.rb:88
  def self.required_prefix(); end

  # in file lib/rss/itunes.rb:92
  def self.required_uri(); end

  # in file lib/rss/itunes.rb:117
  def full_name(); end

end

class RSS::ITunesChannelModel::ITunesImage # is documented

  # in file lib/rss/itunes.rb:163
  def self.new(*args); end

  # in file lib/rss/itunes.rb:148
  def self.required_prefix(); end

  # in file lib/rss/itunes.rb:152
  def self.required_uri(); end

  # in file lib/rss/itunes.rb:172
  def full_name(); end

end

class RSS::ITunesChannelModel::ITunesOwner # is documented

  # in file lib/rss/itunes.rb:214
  def self.new(*args); end

  # in file lib/rss/itunes.rb:196
  def self.required_prefix(); end

  # in file lib/rss/itunes.rb:200
  def self.required_uri(); end

  # in file lib/rss/itunes.rb:224
  def full_name(); end

end

module RSS::ITunesItemModel # is documented

  # in file lib/rss/itunes.rb:257
  ELEMENT_INFOS = nil
  # in file lib/rss/itunes.rb:247
  def self.append_features(klass); end

end

class RSS::ITunesItemModel::ITunesDuration # is documented

  attr_reader :hour # in file lib/rss/itunes.rb:311
  attr_reader :minute # in file lib/rss/itunes.rb:311
  attr_reader :second # in file lib/rss/itunes.rb:311
  # in file lib/rss/itunes.rb:294
  def self.construct(hour, minute, second); end

  # in file lib/rss/itunes.rb:312
  def self.new(*args); end

  # in file lib/rss/itunes.rb:274
  def self.parse(duration, do_validate=true); end

  # in file lib/rss/itunes.rb:266
  def self.required_prefix(); end

  # in file lib/rss/itunes.rb:270
  def self.required_uri(); end

  # in file lib/rss/itunes.rb:333
  def content=(value); end

  # in file lib/rss/itunes.rb:367
  def full_name(); end

  # in file lib/rss/itunes.rb:349
  def hour=(hour); end

  # in file lib/rss/itunes.rb:355
  def minute=(minute); end

  # in file lib/rss/itunes.rb:361
  def second=(second); end

  # in file lib/rss/itunes.rb
  def value=(value); end

end

module RSS::ITunesModelUtils # is documented

  # in file lib/rss/itunes.rb:12
  def def_class_accessor(klass, name, type, *args); end

  # in file lib/rss/itunes.rb:31
  def def_element_class_accessor(klass, name, full_name, klass_name, recommended_attribute_name=nil); end

  # in file lib/rss/itunes.rb:36
  def def_elements_class_accessor(klass, name, full_name, klass_name, plural_name, recommended_attribute_name=nil); end

end

module RSS::ImageFaviconModel # is documented

  # in file lib/rss/image.rb:110
  def self.append_features(klass); end

end

class RSS::ImageFaviconModel::ImageFavicon # is documented

  # in file lib/rss/image.rb:144
  AVAILABLE_SIZES = nil
  # in file lib/rss/image.rb:161
  def self.new(*args); end

  # in file lib/rss/image.rb:127
  def self.required_prefix(); end

  # in file lib/rss/image.rb:131
  def self.required_uri(); end

  # in file lib/rss/image.rb:171
  def full_name(); end

  # in file lib/rss/image.rb
  def image_size=(new_value); end

  # in file lib/rss/image.rb
  def set_size(new_value); end

  # in file lib/rss/image.rb:147
  def size=(new_value); end

end

module RSS::ImageItemModel # is documented

  # in file lib/rss/image.rb:33
  def self.append_features(klass); end

end

class RSS::ImageItemModel::ImageItem # is documented

  # in file lib/rss/image.rb:80
  def self.new(*args); end

  # in file lib/rss/image.rb:48
  def self.required_prefix(); end

  # in file lib/rss/image.rb:52
  def self.required_uri(); end

  # in file lib/rss/image.rb:90
  def full_name(); end

end

module RSS::ImageModelUtils # is documented

  # in file lib/rss/image.rb:20
  def validate_one_tag_name(ignore_unknown_element, name, tags); end

end


module RSS::ListenerMixin # is documented

  # in file lib/rss/parser.rb:375
  CONTENT_PATTERN = nil
  # in file lib/rss/parser.rb:420
  NAMESPLIT = nil
  attr_reader :rss # in file lib/rss/parser.rb:262
  attr_accessor :ignore_unknown_element # in file lib/rss/parser.rb:264
  attr_accessor :do_validate # in file lib/rss/parser.rb:265
  # in file lib/rss/parser.rb:267
  def self.new(); end

  # in file lib/rss/parser.rb:288
  def instruction(name, content); end

  # in file lib/rss/parser.rb:350
  def tag_end(name); end

  # in file lib/rss/parser.rb:297
  def tag_start(name, attributes); end

  # in file lib/rss/parser.rb:362
  def text(data); end

end

module RSS::Maker # is documented

  # in file lib/rss/maker.rb:5
  MAKERS = nil
  # in file lib/rss/maker.rb:12
  def self.[](version); end

  # in file lib/rss/maker.rb:18
  def self.add_maker(version, normalized_version, maker); end

  # in file lib/rss/maker.rb:8
  def self.make(version, &block); end

  # in file lib/rss/maker.rb:26
  def self.makers(); end

  # in file lib/rss/maker.rb:30
  def self.supported?(version); end

  # in file lib/rss/maker.rb:22
  def self.versions(); end

end


class RSS::Maker::Atom::Entry # is documented

  # in file lib/rss/maker/entry.rb:8
  def self.new(feed_version="1.0"); end

end

class RSS::Maker::Atom::Entry::Channel # is documented

  # in file lib/rss/maker/entry.rb:37
  Categories = nil
  # in file lib/rss/maker/entry.rb:38
  Links = nil
  # in file lib/rss/maker/entry.rb:39
  Authors = nil
  # in file lib/rss/maker/entry.rb:40
  Contributors = nil
  # in file lib/rss/maker/entry.rb:50
  Copyright = nil
  # in file lib/rss/maker/entry.rb:55
  Title = nil
end



class RSS::Maker::Atom::Entry::Channel::Generator # is documented

  # in file lib/rss/maker/entry.rb:45
  def self.not_set_name(); end

end






class RSS::Maker::Atom::Entry::Items # is documented

  # in file lib/rss/maker/entry.rb:62
  def to_feed(entry); end

end

class RSS::Maker::Atom::Entry::Items::Item # is documented

  # in file lib/rss/maker/entry.rb:141
  Guid = nil
  # in file lib/rss/maker/entry.rb:142
  Enclosure = nil
  # in file lib/rss/maker/entry.rb:143
  Source = nil
  # in file lib/rss/maker/entry.rb:144
  Categories = nil
  # in file lib/rss/maker/entry.rb:145
  Authors = nil
  # in file lib/rss/maker/entry.rb:146
  Contributors = nil
  # in file lib/rss/maker/entry.rb:147
  Links = nil
  # in file lib/rss/maker/entry.rb:148
  Rights = nil
  # in file lib/rss/maker/entry.rb:149
  Description = nil
  # in file lib/rss/maker/entry.rb:150
  Title = nil
  # in file lib/rss/maker/entry.rb:151
  Content = nil
  # in file lib/rss/maker/entry.rb:67
  def to_feed(entry); end

end


class RSS::Maker::Atom::Feed # is documented

  # in file lib/rss/maker/feed.rb:7
  def self.new(feed_version="1.0"); end

end

class RSS::Maker::Atom::Feed::Channel # is documented

  # in file lib/rss/maker/feed.rb:44
  def have_required_values?(); end

  # in file lib/rss/maker/feed.rb:27
  def to_feed(feed); end

end


class RSS::Maker::Atom::Feed::Channel::Categories::Category # is documented

  # in file lib/rss/maker/feed.rb:108
  def self.not_set_name(); end

end

class RSS::Maker::Atom::Feed::Channel::Cloud # is documented

  # in file lib/rss/maker/feed.rb:100
  def to_feed(*args); end

end

class RSS::Maker::Atom::Feed::Channel::Generator # is documented

  # in file lib/rss/maker/feed.rb:131
  def self.not_set_name(); end

end


class RSS::Maker::Atom::Feed::Channel::Links::Link # is documented

  # in file lib/rss/maker/feed.rb:118
  def self.not_set_name(); end

end

class RSS::Maker::Atom::Feed::Channel::SkipDays # is documented

  # in file lib/rss/maker/feed.rb:84
  def to_feed(*args); end

end


class RSS::Maker::Atom::Feed::Channel::SkipHours # is documented

  # in file lib/rss/maker/feed.rb:92
  def to_feed(*args); end

end


class RSS::Maker::Atom::Feed::Image # is documented

  # in file lib/rss/maker/feed.rb:147
  def to_feed(feed); end

end

class RSS::Maker::Atom::Feed::Items # is documented

  # in file lib/rss/maker/feed.rb:172
  def to_feed(feed); end

end

class RSS::Maker::Atom::Feed::Items::Item # is documented

  # in file lib/rss/maker/feed.rb:195
  def have_required_values?(); end

  # in file lib/rss/maker/feed.rb:180
  def to_feed(feed); end

end


class RSS::Maker::Atom::Feed::Items::Item::Categories::Category # is documented

  # in file lib/rss/maker/feed.rb:338
  def self.not_set_name(); end

end

class RSS::Maker::Atom::Feed::Items::Item::Content # is documented

  # in file lib/rss/maker/feed.rb:367
  def to_feed(feed, current); end

end

class RSS::Maker::Atom::Feed::Items::Item::Enclosure # is documented

  # in file lib/rss/maker/feed.rb:232
  def to_feed(feed, current); end

end

class RSS::Maker::Atom::Feed::Items::Item::Guid # is documented

  # in file lib/rss/maker/feed.rb:227
  def to_feed(feed, current); end

end


class RSS::Maker::Atom::Feed::Items::Item::Links::Link # is documented

  # in file lib/rss/maker/feed.rb:352
  def self.not_set_name(); end

end

class RSS::Maker::Atom::Feed::Items::Item::Source # is documented

  # in file lib/rss/maker/feed.rb:237
  def to_feed(feed, current); end

end


class RSS::Maker::Atom::Feed::Items::Item::Source::Categories::Category # is documented

  # in file lib/rss/maker/feed.rb:264
  def self.not_set_name(); end

end

class RSS::Maker::Atom::Feed::Items::Item::Source::Generator # is documented

  # in file lib/rss/maker/feed.rb:273
  def self.not_set_name(); end

end

class RSS::Maker::Atom::Feed::Items::Item::Source::Icon # is documented

  # in file lib/rss/maker/feed.rb:279
  def to_feed(feed, current); end

end


class RSS::Maker::Atom::Feed::Items::Item::Source::Links::Link # is documented

  # in file lib/rss/maker/feed.rb:308
  def self.not_set_name(); end

end

class RSS::Maker::Atom::Feed::Items::Item::Source::Logo # is documented

  # in file lib/rss/maker/feed.rb:317
  def self.not_set_name(); end

end


module RSS::Maker::AtomCategory # is documented

  # in file lib/rss/maker/atom.rb:84
  def to_feed(feed, current); end

end

module RSS::Maker::AtomGenerator # is documented

  # in file lib/rss/maker/atom.rb:128
  def to_feed(feed, current); end

end

module RSS::Maker::AtomLink # is documented

  # in file lib/rss/maker/atom.rb:108
  def to_feed(feed, current); end

end

module RSS::Maker::AtomLogo # is documented

  # in file lib/rss/maker/atom.rb:147
  def to_feed(feed, current); end

end

module RSS::Maker::AtomPersonConstructBase # is documented

  # in file lib/rss/maker/base.rb:279
  def self.append_features(klass); end

end

module RSS::Maker::AtomPersons # is documented

  # in file lib/rss/maker/atom.rb:9
  def def_atom_persons(klass, name, maker_name, plural=nil); end

end

module RSS::Maker::AtomTextConstruct # is documented

  # in file lib/rss/maker/atom.rb:41
  def self.def_atom_text_construct(klass, name, maker_name, klass_name=nil, atom_klass_name=nil); end

end

module RSS::Maker::AtomTextConstructBase # is documented

  # in file lib/rss/maker/base.rb:345
  def self.append_features(klass); end

end

module RSS::Maker::AtomTextConstructBase::EnsureXMLContent # is documented

  # in file lib/rss/maker/base.rb:294
  def self.included(base); end

  # in file lib/rss/maker/base.rb:308
  def ensure_xml_content(content); end

  # in file lib/rss/maker/base.rb:326
  def xhtml=(content); end

  # in file lib/rss/maker/base.rb:322
  def xml_content=(content); end

end

class RSS::Maker::Base # is documented

  # in file lib/rss/maker/base.rb:10
  OTHER_ELEMENTS = nil
  # in file lib/rss/maker/base.rb:11
  NEED_INITIALIZE_VARIABLES = nil
  attr_reader :maker # in file lib/rss/maker/base.rb:174
  # in file lib/rss/maker/base.rb:34
  def self.add_need_initialize_variable(variable_name, init_value=nil, &init_block); end

  # in file lib/rss/maker/base.rb:30
  def self.add_other_element(variable_name); end

  # in file lib/rss/maker/base.rb:40
  def self.def_array_element(name, plural=nil, klass_name=nil); end

  # in file lib/rss/maker/base.rb:94
  def self.def_classed_element(name, class_name=nil, attribute_name=nil); end

  # in file lib/rss/maker/base.rb:76
  def self.def_classed_element_without_accessor(name, class_name=nil); end

  # in file lib/rss/maker/base.rb:115
  def self.def_classed_elements(name, attribute, plural_class_name=nil, plural_name=nil, new_name=nil); end

  # in file lib/rss/maker/base.rb:159
  def self.def_csv_element(name, type=nil); end

  # in file lib/rss/maker/base.rb:142
  def self.def_other_element(name); end

  # in file lib/rss/maker/base.rb:147
  def self.def_other_element_without_accessor(name); end

  # in file lib/rss/maker/base.rb:25
  def self.inherited(subclass); end

  # in file lib/rss/maker/base.rb:21
  def self.inherited_base(); end

  # in file lib/rss/maker/base.rb:17
  def self.need_initialize_variables(); end

  # in file lib/rss/maker/base.rb:175
  def self.new(maker); end

  # in file lib/rss/maker/base.rb:14
  def self.other_elements(); end

  # in file lib/rss/maker/base.rb:181
  def have_required_values?(); end

  # in file lib/rss/maker/base.rb:185
  def variable_is_set?(); end

end

class RSS::Maker::ChannelBase # is documented

  # in file lib/rss/maker/base.rb:521
  def date=(_date); end

  # in file lib/rss/maker/base.rb:551
  def icon(); end

  # in file lib/rss/maker/base.rb:555
  def icon=(url); end

  # in file lib/rss/maker/base.rb:525
  def lastBuildDate=(_date); end

  # in file lib/rss/maker/base.rb:559
  def logo(); end

  # in file lib/rss/maker/base.rb:563
  def logo=(url); end

  # in file lib/rss/maker/base.rb:529
  def pubDate(); end

  # in file lib/rss/maker/base.rb:533
  def pubDate=(date); end

  # in file lib/rss/maker/base.rb:537
  def updated(); end

  # in file lib/rss/maker/base.rb:541
  def updated=(date); end

end


class RSS::Maker::ChannelBase::ITunesCategories::ITunesCategory # is documented

  # in file lib/rss/maker/itunes.rb:227
  ITunesCategory = nil
end

module RSS::Maker::ContentModel # is documented

  # in file lib/rss/maker/content.rb:8
  def self.append_features(klass); end

end

module RSS::Maker::DublinCoreModel # is documented

  # in file lib/rss/maker/dublincore.rb:7
  def self.append_features(klass); end

  # in file lib/rss/maker/dublincore.rb:70
  def self.install_dublin_core(klass); end

end

module RSS::Maker::ITunesBaseModel # is documented

  # in file lib/rss/maker/itunes.rb:7
  def def_class_accessor(klass, name, type, *args); end

  # in file lib/rss/maker/itunes.rb:54
  def def_csv_accessor(klass, full_name); end

  # in file lib/rss/maker/itunes.rb:58
  def def_elements_class_accessor(klass, name, full_name, full_plural_name, klass_name, plural_klass_name, recommended_attribute_name=nil); end

  # in file lib/rss/maker/itunes.rb:45
  def def_yes_clean_other_accessor(klass, full_name); end

  # in file lib/rss/maker/itunes.rb:36
  def def_yes_other_accessor(klass, full_name); end

end

module RSS::Maker::ITunesChannelModel # is documented

  # in file lib/rss/maker/itunes.rb:85
  def self.append_features(klass); end

end


class RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase # is documented

  attr_accessor :text # in file lib/rss/maker/itunes.rb:98
  # in file lib/rss/maker/itunes.rb:103
  def have_required_values?(); end

  # in file lib/rss/maker/itunes.rb:108
  def to_feed(feed, current); end

  # in file lib/rss/maker/itunes.rb
  def to_feed_for_categories(feed, current); end

end

class RSS::Maker::ITunesChannelModel::ITunesImageBase # is documented

  attr_accessor :href # in file lib/rss/maker/itunes.rb:120
  # in file lib/rss/maker/itunes.rb:122
  def to_feed(feed, current); end

end

class RSS::Maker::ITunesChannelModel::ITunesOwnerBase # is documented

  # in file lib/rss/maker/itunes.rb:136
  def to_feed(feed, current); end

end

module RSS::Maker::ITunesItemModel # is documented

  # in file lib/rss/maker/itunes.rb:164
  def self.append_features(klass); end

end

class RSS::Maker::ITunesItemModel::ITunesDurationBase # is documented

  attr_reader :content # in file lib/rss/maker/itunes.rb:174
  # in file lib/rss/maker/itunes.rb:182
  def content=(content); end

  # in file lib/rss/maker/itunes.rb:192
  def hour=(hour); end

  # in file lib/rss/maker/itunes.rb:197
  def minute=(minute); end

  # in file lib/rss/maker/itunes.rb:202
  def second=(second); end

  # in file lib/rss/maker/itunes.rb:207
  def to_feed(feed, current); end

end

class RSS::Maker::ImageBase # is documented

  # in file lib/rss/maker/base.rb:665
  def link(); end

end

module RSS::Maker::ImageFaviconModel # is documented

  # in file lib/rss/maker/image.rb:52
  def self.append_features(klass); end

  # in file lib/rss/maker/image.rb:59
  def self.install_image_favicon(klass); end

end

class RSS::Maker::ImageFaviconModel::ImageFaviconBase # is documented

  attr_accessor :about # in file lib/rss/maker/image.rb:70
  attr_accessor :image_size # in file lib/rss/maker/image.rb:70
  attr_accessor :size # in file lib/rss/maker/image.rb
  attr_accessor :size= # in file lib/rss/maker/image.rb
  # in file lib/rss/maker/image.rb:76
  def have_required_values?(); end

  # in file lib/rss/maker/image.rb:80
  def to_feed(feed, current); end

end

module RSS::Maker::ImageItemModel # is documented

  # in file lib/rss/maker/image.rb:8
  def self.append_features(klass); end

  # in file lib/rss/maker/image.rb:15
  def self.install_image_item(klass); end

end

class RSS::Maker::ImageItemModel::ImageItemBase # is documented

  attr_accessor :about # in file lib/rss/maker/image.rb:26
  attr_accessor :resource # in file lib/rss/maker/image.rb:26
  attr_accessor :image_width # in file lib/rss/maker/image.rb:26
  attr_accessor :image_height # in file lib/rss/maker/image.rb:26
  attr_accessor :width= # in file lib/rss/maker/image.rb
  attr_accessor :height= # in file lib/rss/maker/image.rb
  # in file lib/rss/maker/image.rb:36
  def have_required_values?(); end

  # in file lib/rss/maker/image.rb:40
  def to_feed(feed, current); end

end

class RSS::Maker::ItemsBase # is documented

  attr_accessor :do_sort # in file lib/rss/maker/base.rb:673
  attr_accessor :max_size # in file lib/rss/maker/base.rb:673
  # in file lib/rss/maker/base.rb:675
  def self.new(maker); end

  # in file lib/rss/maker/base.rb:681
  def normalize(); end

end

class RSS::Maker::ItemsBase::ItemBase # is documented

  # in file lib/rss/maker/base.rb:866
  CategoriesBase = nil
  # in file lib/rss/maker/base.rb:867
  AuthorsBase = nil
  # in file lib/rss/maker/base.rb:868
  LinksBase = nil
  # in file lib/rss/maker/base.rb:869
  ContributorsBase = nil
  # in file lib/rss/maker/base.rb:756
  def <=>(other); end

  # in file lib/rss/maker/base.rb:733
  def date=(_date); end

  # in file lib/rss/maker/base.rb:737
  def pubDate(); end

  # in file lib/rss/maker/base.rb:741
  def pubDate=(date); end

  # in file lib/rss/maker/base.rb:745
  def updated(); end

  # in file lib/rss/maker/base.rb:749
  def updated=(date); end

end

class RSS::Maker::ItemsBase::ItemBase::ContentBase # is documented

  # in file lib/rss/maker/base.rb:899
  def inline_html?(); end

  # in file lib/rss/maker/base.rb:907
  def inline_other?(); end

  # in file lib/rss/maker/base.rb:921
  def inline_other_base64?(); end

  # in file lib/rss/maker/base.rb:911
  def inline_other_text?(); end

  # in file lib/rss/maker/base.rb:916
  def inline_other_xml?(); end

  # in file lib/rss/maker/base.rb:895
  def inline_text?(); end

  # in file lib/rss/maker/base.rb:903
  def inline_xhtml?(); end

  # in file lib/rss/maker/base.rb:926
  def out_of_line?(); end

  # in file lib/rss/maker/base.rb
  def xml=(content); end

  # in file lib/rss/maker/base.rb:887
  def xml_content=(content); end

end



class RSS::Maker::ItemsBase::ItemBase::GuidBase # is documented

  # in file lib/rss/maker/base.rb:780
  def permanent_link=(bool); end

  # in file lib/rss/maker/base.rb:776
  def permanent_link?(); end

end



class RSS::Maker::ItemsBase::ItemBase::SourceBase # is documented

  # in file lib/rss/maker/base.rb:832
  AuthorsBase = nil
  # in file lib/rss/maker/base.rb:833
  CategoriesBase = nil
  # in file lib/rss/maker/base.rb:834
  ContributorsBase = nil
  # in file lib/rss/maker/base.rb:835
  GeneratorBase = nil
  # in file lib/rss/maker/base.rb:844
  LinksBase = nil
  # in file lib/rss/maker/base.rb:819
  def date=(_date); end

  # in file lib/rss/maker/base.rb:823
  def updated(); end

  # in file lib/rss/maker/base.rb:827
  def updated=(date); end

end


class RSS::Maker::RSS09 # is documented

  # in file lib/rss/maker/0.9.rb:10
  def self.new(feed_version); end

end

class RSS::Maker::RSS091 # is documented

  # in file lib/rss/maker/0.9.rb:462
  def self.new(feed_version="0.91"); end

end

class RSS::Maker::RSS092 # is documented

  # in file lib/rss/maker/0.9.rb:482
  def self.new(feed_version="0.92"); end

end

class RSS::Maker::RSS09::Channel # is documented

  # in file lib/rss/maker/0.9.rb:25
  def to_feed(rss); end

end

class RSS::Maker::RSS09::Channel::Authors # is documented

  # in file lib/rss/maker/0.9.rb:167
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS09::Channel::Authors::Author # is documented

  # in file lib/rss/maker/0.9.rb:171
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS09::Channel::Categories # is documented

  # in file lib/rss/maker/0.9.rb:136
  def to_feed(*args); end

end


class RSS::Maker::RSS09::Channel::Cloud # is documented

  # in file lib/rss/maker/0.9.rb:131
  def to_feed(*args); end

end

class RSS::Maker::RSS09::Channel::Contributors # is documented

  # in file lib/rss/maker/0.9.rb:177
  def to_feed(rss, channel); end

end


class RSS::Maker::RSS09::Channel::Copyright # is documented

  # in file lib/rss/maker/0.9.rb:190
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS09::Channel::Description # is documented

  # in file lib/rss/maker/0.9.rb:201
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS09::Channel::Generator # is documented

  # in file lib/rss/maker/0.9.rb:185
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS09::Channel::Links # is documented

  # in file lib/rss/maker/0.9.rb:144
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS09::Channel::Links::Link # is documented

  # in file lib/rss/maker/0.9.rb:150
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS09::Channel::SkipDays # is documented

  # in file lib/rss/maker/0.9.rb:71
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS09::Channel::SkipDays::Day # is documented

  # in file lib/rss/maker/0.9.rb:83
  def to_feed(rss, days); end

end

class RSS::Maker::RSS09::Channel::SkipHours # is documented

  # in file lib/rss/maker/0.9.rb:101
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS09::Channel::SkipHours::Hour # is documented

  # in file lib/rss/maker/0.9.rb:113
  def to_feed(rss, hours); end

end

class RSS::Maker::RSS09::Channel::Title # is documented

  # in file lib/rss/maker/0.9.rb:212
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS09::Image # is documented

  # in file lib/rss/maker/0.9.rb:224
  def to_feed(rss); end

end

class RSS::Maker::RSS09::Items # is documented

  # in file lib/rss/maker/0.9.rb:248
  def to_feed(rss); end

end

class RSS::Maker::RSS09::Items::Item # is documented

  # in file lib/rss/maker/0.9.rb:258
  def to_feed(rss); end

end

class RSS::Maker::RSS09::Items::Item::Authors # is documented

  # in file lib/rss/maker/0.9.rb:371
  def to_feed(*args); end

end


class RSS::Maker::RSS09::Items::Item::Categories # is documented

  # in file lib/rss/maker/0.9.rb:363
  def to_feed(*args); end

end


class RSS::Maker::RSS09::Items::Item::Content # is documented

  # in file lib/rss/maker/0.9.rb:426
  def to_feed(rss, item); end

end

class RSS::Maker::RSS09::Items::Item::Contributors # is documented

  # in file lib/rss/maker/0.9.rb:402
  def to_feed(rss, item); end

end


class RSS::Maker::RSS09::Items::Item::Description # is documented

  # in file lib/rss/maker/0.9.rb:415
  def to_feed(rss, item); end

end

class RSS::Maker::RSS09::Items::Item::Enclosure # is documented

  # in file lib/rss/maker/0.9.rb:291
  def to_feed(*args); end

end

class RSS::Maker::RSS09::Items::Item::Guid # is documented

  # in file lib/rss/maker/0.9.rb:286
  def to_feed(*args); end

end

class RSS::Maker::RSS09::Items::Item::Links # is documented

  # in file lib/rss/maker/0.9.rb:379
  def to_feed(rss, item); end

end

class RSS::Maker::RSS09::Items::Item::Links::Link # is documented

  # in file lib/rss/maker/0.9.rb:385
  def to_feed(rss, item); end

end

class RSS::Maker::RSS09::Items::Item::Rights # is documented

  # in file lib/rss/maker/0.9.rb:410
  def to_feed(rss, item); end

end

class RSS::Maker::RSS09::Items::Item::Source # is documented

  # in file lib/rss/maker/0.9.rb:296
  def to_feed(*args); end

end

class RSS::Maker::RSS09::Items::Item::Source::Authors # is documented

  # in file lib/rss/maker/0.9.rb:300
  def to_feed(*args); end

end


class RSS::Maker::RSS09::Items::Item::Source::Categories # is documented

  # in file lib/rss/maker/0.9.rb:308
  def to_feed(*args); end

end


class RSS::Maker::RSS09::Items::Item::Source::Contributors # is documented

  # in file lib/rss/maker/0.9.rb:316
  def to_feed(*args); end

end


class RSS::Maker::RSS09::Items::Item::Source::Generator # is documented

  # in file lib/rss/maker/0.9.rb:324
  def to_feed(*args); end

end

class RSS::Maker::RSS09::Items::Item::Source::Icon # is documented

  # in file lib/rss/maker/0.9.rb:329
  def to_feed(*args); end

end

class RSS::Maker::RSS09::Items::Item::Source::Links # is documented

  # in file lib/rss/maker/0.9.rb:334
  def to_feed(*args); end

end


class RSS::Maker::RSS09::Items::Item::Source::Logo # is documented

  # in file lib/rss/maker/0.9.rb:342
  def to_feed(*args); end

end

class RSS::Maker::RSS09::Items::Item::Source::Rights # is documented

  # in file lib/rss/maker/0.9.rb:347
  def to_feed(*args); end

end

class RSS::Maker::RSS09::Items::Item::Source::Subtitle # is documented

  # in file lib/rss/maker/0.9.rb:352
  def to_feed(*args); end

end

class RSS::Maker::RSS09::Items::Item::Source::Title # is documented

  # in file lib/rss/maker/0.9.rb:357
  def to_feed(*args); end

end

class RSS::Maker::RSS09::Items::Item::Title # is documented

  # in file lib/rss/maker/0.9.rb:431
  def to_feed(rss, item); end

end

class RSS::Maker::RSS09::Textinput # is documented

  # in file lib/rss/maker/0.9.rb:444
  def to_feed(rss); end

end

class RSS::Maker::RSS10 # is documented

  # in file lib/rss/maker/1.0.rb:10
  def self.new(feed_version="1.0"); end

end

class RSS::Maker::RSS10::Channel # is documented

  # in file lib/rss/maker/1.0.rb:30
  def to_feed(rss); end

end

class RSS::Maker::RSS10::Channel::Authors # is documented

  # in file lib/rss/maker/1.0.rb:145
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS10::Channel::Authors::Author # is documented

  # in file lib/rss/maker/1.0.rb:149
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS10::Channel::Categories # is documented

  # in file lib/rss/maker/1.0.rb:114
  def to_feed(*args); end

end


class RSS::Maker::RSS10::Channel::Cloud # is documented

  # in file lib/rss/maker/1.0.rb:109
  def to_feed(*args); end

end

class RSS::Maker::RSS10::Channel::Contributors # is documented

  # in file lib/rss/maker/1.0.rb:155
  def to_feed(rss, channel); end

end


class RSS::Maker::RSS10::Channel::Copyright # is documented

  # in file lib/rss/maker/1.0.rb:168
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS10::Channel::Description # is documented

  # in file lib/rss/maker/1.0.rb:173
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS10::Channel::Generator # is documented

  # in file lib/rss/maker/1.0.rb:163
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS10::Channel::Links # is documented

  # in file lib/rss/maker/1.0.rb:122
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS10::Channel::Links::Link # is documented

  # in file lib/rss/maker/1.0.rb:128
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS10::Channel::SkipDays # is documented

  # in file lib/rss/maker/1.0.rb:93
  def to_feed(*args); end

end


class RSS::Maker::RSS10::Channel::SkipHours # is documented

  # in file lib/rss/maker/1.0.rb:101
  def to_feed(*args); end

end


class RSS::Maker::RSS10::Channel::Title # is documented

  # in file lib/rss/maker/1.0.rb:184
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS10::Image # is documented

  # in file lib/rss/maker/1.0.rb:208
  def have_required_values?(); end

  # in file lib/rss/maker/1.0.rb:196
  def to_feed(rss); end

end

class RSS::Maker::RSS10::Items # is documented

  # in file lib/rss/maker/1.0.rb:223
  def to_feed(rss); end

end

class RSS::Maker::RSS10::Items::Item # is documented

  # in file lib/rss/maker/1.0.rb:233
  def to_feed(rss); end

end

class RSS::Maker::RSS10::Items::Item::Authors # is documented

  # in file lib/rss/maker/1.0.rb:351
  def to_feed(*args); end

end


class RSS::Maker::RSS10::Items::Item::Categories # is documented

  # in file lib/rss/maker/1.0.rb:343
  def to_feed(*args); end

end


class RSS::Maker::RSS10::Items::Item::Content # is documented

  # in file lib/rss/maker/1.0.rb:391
  def to_feed(rss, item); end

end

class RSS::Maker::RSS10::Items::Item::Contributors # is documented

  # in file lib/rss/maker/1.0.rb:367
  def to_feed(rss, item); end

end


class RSS::Maker::RSS10::Items::Item::Description # is documented

  # in file lib/rss/maker/1.0.rb:380
  def to_feed(rss, item); end

end

class RSS::Maker::RSS10::Items::Item::Enclosure # is documented

  # in file lib/rss/maker/1.0.rb:271
  def to_feed(*args); end

end

class RSS::Maker::RSS10::Items::Item::Guid # is documented

  # in file lib/rss/maker/1.0.rb:266
  def to_feed(*args); end

end

class RSS::Maker::RSS10::Items::Item::Links # is documented

  # in file lib/rss/maker/1.0.rb:359
  def to_feed(*args); end

end


class RSS::Maker::RSS10::Items::Item::Rights # is documented

  # in file lib/rss/maker/1.0.rb:375
  def to_feed(rss, item); end

end

class RSS::Maker::RSS10::Items::Item::Source # is documented

  # in file lib/rss/maker/1.0.rb:276
  def to_feed(*args); end

end

class RSS::Maker::RSS10::Items::Item::Source::Authors # is documented

  # in file lib/rss/maker/1.0.rb:280
  def to_feed(*args); end

end


class RSS::Maker::RSS10::Items::Item::Source::Categories # is documented

  # in file lib/rss/maker/1.0.rb:288
  def to_feed(*args); end

end


class RSS::Maker::RSS10::Items::Item::Source::Contributors # is documented

  # in file lib/rss/maker/1.0.rb:296
  def to_feed(*args); end

end


class RSS::Maker::RSS10::Items::Item::Source::Generator # is documented

  # in file lib/rss/maker/1.0.rb:304
  def to_feed(*args); end

end

class RSS::Maker::RSS10::Items::Item::Source::Icon # is documented

  # in file lib/rss/maker/1.0.rb:309
  def to_feed(*args); end

end

class RSS::Maker::RSS10::Items::Item::Source::Links # is documented

  # in file lib/rss/maker/1.0.rb:314
  def to_feed(*args); end

end


class RSS::Maker::RSS10::Items::Item::Source::Logo # is documented

  # in file lib/rss/maker/1.0.rb:322
  def to_feed(*args); end

end

class RSS::Maker::RSS10::Items::Item::Source::Rights # is documented

  # in file lib/rss/maker/1.0.rb:327
  def to_feed(*args); end

end

class RSS::Maker::RSS10::Items::Item::Source::Subtitle # is documented

  # in file lib/rss/maker/1.0.rb:332
  def to_feed(*args); end

end

class RSS::Maker::RSS10::Items::Item::Source::Title # is documented

  # in file lib/rss/maker/1.0.rb:337
  def to_feed(*args); end

end

class RSS::Maker::RSS10::Items::Item::Title # is documented

  # in file lib/rss/maker/1.0.rb:396
  def to_feed(rss, item); end

end

class RSS::Maker::RSS10::Textinput # is documented

  # in file lib/rss/maker/1.0.rb:421
  def have_required_values?(); end

  # in file lib/rss/maker/1.0.rb:409
  def to_feed(rss); end

end

class RSS::Maker::RSS20 # is documented

  # in file lib/rss/maker/2.0.rb:10
  def self.new(feed_version="2.0"); end

end


class RSS::Maker::RSS20::Channel::Categories # is documented

  # in file lib/rss/maker/2.0.rb:49
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS20::Channel::Categories::Category # is documented

  # in file lib/rss/maker/2.0.rb:56
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS20::Channel::Cloud # is documented

  # in file lib/rss/maker/2.0.rb:32
  def to_feed(rss, channel); end

end

class RSS::Maker::RSS20::Channel::Generator # is documented

  # in file lib/rss/maker/2.0.rb:74
  def to_feed(rss, channel); end

end








class RSS::Maker::RSS20::Items::Item::Authors # is documented

  # in file lib/rss/maker/2.0.rb:202
  def to_feed(rss, item); end

end

class RSS::Maker::RSS20::Items::Item::Authors::Author # is documented

  # in file lib/rss/maker/2.0.rb:208
  def to_feed(rss, item); end

end

class RSS::Maker::RSS20::Items::Item::Categories # is documented

  # in file lib/rss/maker/2.0.rb:177
  def to_feed(rss, item); end

end

class RSS::Maker::RSS20::Items::Item::Categories::Category # is documented

  # in file lib/rss/maker/2.0.rb:184
  def to_feed(rss, item); end

end

class RSS::Maker::RSS20::Items::Item::Enclosure # is documented

  # in file lib/rss/maker/2.0.rb:130
  def to_feed(rss, item); end

end

class RSS::Maker::RSS20::Items::Item::Guid # is documented

  # in file lib/rss/maker/2.0.rb:113
  def to_feed(rss, item); end

end

class RSS::Maker::RSS20::Items::Item::Source # is documented

  # in file lib/rss/maker/2.0.rb:147
  def to_feed(rss, item); end

end

class RSS::Maker::RSS20::Items::Item::Source::Links # is documented

  # in file lib/rss/maker/2.0.rb:163
  def to_feed(rss, source); end

end

class RSS::Maker::RSS20::Items::Item::Source::Links::Link # is documented

  # in file lib/rss/maker/2.0.rb:169
  def to_feed(rss, source); end

end


class RSS::Maker::RSSBase # is documented

  attr_reader :feed_version # in file lib/rss/maker/base.rb:423
  attr_reader :rss_version # in file lib/rss/maker/base.rb
  attr_accessor :version # in file lib/rss/maker/base.rb:425
  attr_accessor :encoding # in file lib/rss/maker/base.rb:425
  attr_accessor :standalone # in file lib/rss/maker/base.rb:425
  # in file lib/rss/maker/base.rb:401
  def self.make(*args, &block); end

  # in file lib/rss/maker/base.rb:427
  def self.new(feed_version); end

  # in file lib/rss/maker/base.rb:437
  def make(); end

  # in file lib/rss/maker/base.rb:442
  def to_feed(); end

end



module RSS::Maker::SlashModel # is documented

  # in file lib/rss/maker/slash.rb:7
  def self.append_features(klass); end

end

module RSS::Maker::SyndicationModel # is documented

  # in file lib/rss/maker/syndication.rb:7
  def self.append_features(klass); end

end

module RSS::Maker::TaxonomyTopicModel # is documented

  # in file lib/rss/maker/taxonomy.rb:40
  def self.append_features(klass); end

  # in file lib/rss/maker/taxonomy.rb:47
  def self.install_taxo_topic(klass); end

end


class RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase::TaxonomyTopicBase # is documented

  attr_accessor :value # in file lib/rss/maker/taxonomy.rb:76
  attr_accessor :taxo_link # in file lib/rss/maker/taxonomy.rb
  attr_accessor :taxo_link= # in file lib/rss/maker/taxonomy.rb
  # in file lib/rss/maker/taxonomy.rb:81
  def have_required_values?(); end

end

module RSS::Maker::TaxonomyTopicsModel # is documented

  # in file lib/rss/maker/taxonomy.rb:8
  def self.append_features(klass); end

  # in file lib/rss/maker/taxonomy.rb:15
  def self.install_taxo_topics(klass); end

end

class RSS::Maker::TaxonomyTopicsModel::TaxonomyTopicsBase # is documented

  attr_reader :resources # in file lib/rss/maker/taxonomy.rb:33
end


module RSS::Maker::TrackBackModel # is documented

  # in file lib/rss/maker/trackback.rb:8
  def self.append_features(klass); end

end


class RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase # is documented

  attr_accessor :value # in file lib/rss/maker/trackback.rb:20
  attr_accessor :resource # in file lib/rss/maker/trackback.rb
  attr_accessor :resource= # in file lib/rss/maker/trackback.rb
  attr_accessor :content # in file lib/rss/maker/trackback.rb
  attr_accessor :content= # in file lib/rss/maker/trackback.rb
  # in file lib/rss/maker/trackback.rb:28
  def have_required_values?(); end

  # in file lib/rss/maker/trackback.rb:32
  def to_feed(feed, current); end

end


class RSS::Maker::XMLStyleSheets::XMLStyleSheet # is documented

  # in file lib/rss/maker/base.rb:468
  def to_feed(feed); end

end

class RSS::MissingAttributeError # is documented

  attr_reader :tag # in file lib/rss/rss.rb:99
  attr_reader :attribute # in file lib/rss/rss.rb:99
  # in file lib/rss/rss.rb:100
  def self.new(tag, attribute); end

end

class RSS::MissingTagError # is documented

  attr_reader :tag # in file lib/rss/rss.rb:77
  attr_reader :parent # in file lib/rss/rss.rb:77
  # in file lib/rss/rss.rb:78
  def self.new(tag, parent); end

end

class RSS::NSError # is documented

  attr_reader :tag # in file lib/rss/parser.rb:44
  attr_reader :prefix # in file lib/rss/parser.rb:44
  attr_reader :uri # in file lib/rss/parser.rb:44
  # in file lib/rss/parser.rb:45
  def self.new(tag, prefix, require_uri); end

end

class RSS::NotAvailableValueError # is documented

  attr_reader :tag # in file lib/rss/rss.rb:134
  attr_reader :value # in file lib/rss/rss.rb:134
  attr_reader :attribute # in file lib/rss/rss.rb:134
  # in file lib/rss/rss.rb:135
  def self.new(tag, value, attribute=nil); end

end

class RSS::NotExceptedTagError # is documented

  attr_reader :tag # in file lib/rss/rss.rb:121
  attr_reader :uri # in file lib/rss/rss.rb:121
  attr_reader :parent # in file lib/rss/rss.rb:121
  # in file lib/rss/rss.rb:122
  def self.new(tag, uri, parent); end

end

class RSS::NotExpectedTagError # is documented

  attr_reader :tag # in file lib/rss/rss.rb:121
  attr_reader :uri # in file lib/rss/rss.rb:121
  attr_reader :parent # in file lib/rss/rss.rb:121
  # in file lib/rss/rss.rb:122
  def self.new(tag, uri, parent); end

end

class RSS::NotSetError # is documented

  attr_reader :name # in file lib/rss/rss.rb:175
  attr_reader :variables # in file lib/rss/rss.rb:175
  # in file lib/rss/rss.rb:176
  def self.new(name, variables); end

end

class RSS::NotValidXMLParser # is documented

  # in file lib/rss/parser.rb:35
  def self.new(parser); end

end

class RSS::NotWellFormedError # is documented

  attr_reader :line # in file lib/rss/parser.rb:10
  attr_reader :element # in file lib/rss/parser.rb:10
end

class RSS::OverlappedPrefixError # is documented

  attr_reader :prefix # in file lib/rss/rss.rb:65
  # in file lib/rss/rss.rb:66
  def self.new(prefix); end

end

class RSS::Parser # is documented

  # in file lib/rss/parser.rb:60
  def self.default_parser(); end

  # in file lib/rss/parser.rb:88
  def self.new(rss, parser_class=self.class.default_parser); end

  # in file lib/rss/parser.rb:74
  def self.parse(rss, do_validate=true, ignore_unknown_element=true, parser_class=default_parser); end

end

class RSS::RDF # is documented

  # in file lib/rss/1.0.rb:32
  PREFIX = nil
  # in file lib/rss/1.0.rb:33
  URI = nil
  # in file lib/rss/1.0.rb:49
  def self.new(version=nil, encoding=nil, standalone=nil); end

  # in file lib/rss/1.0.rb:24
  def self.required_uri(); end

  # in file lib/rss/1.0.rb:54
  def full_name(); end

end

class RSS::RDF::Bag # is documented

  # in file lib/rss/1.0.rb:142
  def self.new(*args); end

  # in file lib/rss/1.0.rb:132
  def self.required_uri(); end

  # in file lib/rss/1.0.rb:151
  def full_name(); end

  # in file lib/rss/1.0.rb:155
  def setup_maker(target); end

end

class RSS::RDF::Channel # is documented

  # in file lib/rss/1.0.rb:192
  def self.new(*args); end

  # in file lib/rss/1.0.rb:168
  def self.required_uri(); end

end

class RSS::RDF::Channel::Image # is documented

  # in file lib/rss/1.0.rb:229
  def self.new(*args); end

  # in file lib/rss/1.0.rb:216
  def self.required_uri(); end

end

class RSS::RDF::Channel::Items # is documented

  # in file lib/rss/1.0.rb:285
  def self.new(*args); end

  # in file lib/rss/1.0.rb:276
  def self.required_uri(); end

  # in file lib/rss/1.0.rb:295
  def resources(); end

end

class RSS::RDF::Channel::Textinput # is documented

  # in file lib/rss/1.0.rb:258
  def self.new(*args); end

  # in file lib/rss/1.0.rb:245
  def self.required_uri(); end

end

class RSS::RDF::Image # is documented

  # in file lib/rss/1.0.rb:330
  def self.new(*args); end

  # in file lib/rss/1.0.rb:313
  def self.required_uri(); end

end

class RSS::RDF::Item # is documented

  # in file lib/rss/1.0.rb:373
  def self.new(*args); end

  # in file lib/rss/1.0.rb:351
  def self.required_uri(); end

end

class RSS::RDF::Li # is documented

  # in file lib/rss/1.0.rb:74
  def self.new(*args); end

  # in file lib/rss/1.0.rb:63
  def self.required_uri(); end

  # in file lib/rss/1.0.rb:83
  def full_name(); end

end

class RSS::RDF::Seq # is documented

  # in file lib/rss/1.0.rb:105
  def self.new(*args); end

  # in file lib/rss/1.0.rb:95
  def self.required_uri(); end

  # in file lib/rss/1.0.rb:114
  def full_name(); end

  # in file lib/rss/1.0.rb:118
  def setup_maker(target); end

end

class RSS::RDF::Textinput # is documented

  # in file lib/rss/1.0.rb:415
  def self.new(*args); end

  # in file lib/rss/1.0.rb:398
  def self.required_uri(); end

end

class RSS::REXMLLikeXMLParser # is documented

  # in file lib/rss/xmlparser.rb:46
  def character(data); end

  # in file lib/rss/xmlparser.rb:42
  def endElement(name); end

  # in file lib/rss/xmlparser.rb:34
  def listener=(listener); end

  # in file lib/rss/xmlparser.rb:54
  def processingInstruction(target, content); end

  # in file lib/rss/xmlparser.rb:38
  def startElement(name, attrs); end

  # in file lib/rss/xmlparser.rb:50
  def xmlDecl(version, encoding, standalone); end

end

class RSS::REXMLListener # is documented

  # in file lib/rss/rexmlparser.rb:40
  def self.raise_for_undefined_entity?(); end

end

class RSS::REXMLParser # is documented

  # in file lib/rss/rexmlparser.rb:14
  def self.listener(); end

end

module RSS::RSS09 # is documented

  # in file lib/rss/0.9.rb:6
  NSPOOL = nil
  # in file lib/rss/0.9.rb:7
  ELEMENTS = nil
  # in file lib/rss/0.9.rb:9
  def self.append_features(klass); end

end

module RSS::RSS10 # is documented

  # in file lib/rss/1.0.rb:6
  NSPOOL = nil
  # in file lib/rss/1.0.rb:7
  ELEMENTS = nil
  # in file lib/rss/1.0.rb:9
  def self.append_features(klass); end

end

module RSS::RootElementMixin # is documented

  attr_reader :output_encoding # in file lib/rss/rss.rb:1243
  attr_reader :feed_type # in file lib/rss/rss.rb:1244
  attr_reader :feed_subtype # in file lib/rss/rss.rb:1244
  attr_reader :feed_version # in file lib/rss/rss.rb:1244
  attr_accessor :version # in file lib/rss/rss.rb:1245
  attr_accessor :encoding # in file lib/rss/rss.rb:1245
  attr_accessor :standalone # in file lib/rss/rss.rb:1245
  # in file lib/rss/rss.rb:1246
  def self.new(feed_version, version=nil, encoding=nil, standalone=nil); end

  # in file lib/rss/rss.rb:1257
  def feed_info(); end

  # in file lib/rss/rss.rb:1261
  def output_encoding=(enc); end

  # in file lib/rss/rss.rb:1266
  def setup_maker(maker); end

  # in file lib/rss/rss.rb:1289
  def to_atom(type, &block); end

  # in file lib/rss/rss.rb:1278
  def to_feed(type, &block); end

  # in file lib/rss/rss.rb:1285
  def to_rss(type, &block); end

  # in file lib/rss/rss.rb:1293
  def to_xml(type=nil, &block); end

end

class RSS::Rss # is documented

  attr_writer :feed_version # in file lib/rss/0.9.rb:25
  attr_accessor :rss_version # in file lib/rss/0.9.rb
  # in file lib/rss/0.9.rb:29
  def self.new(feed_version, version=nil, encoding=nil, standalone=nil); end

  # in file lib/rss/0.9.rb:42
  def image(); end

  # in file lib/rss/0.9.rb:34
  def items(); end

  # in file lib/rss/0.9.rb:58
  def setup_maker_elements(maker); end

  # in file lib/rss/0.9.rb:50
  def textinput(); end

end

class RSS::Rss::Channel # is documented

  # in file lib/rss/2.0.rb:29
  Category = nil
end

class RSS::Rss::Channel::Cloud # is documented

  # in file lib/rss/0.9.rb:229
  def self.new(*args); end

end

class RSS::Rss::Channel::Image # is documented

  # in file lib/rss/0.9.rb:195
  def self.new(*args); end

end


class RSS::Rss::Channel::Item::Category # is documented

  # in file lib/rss/0.9.rb:353
  def self.new(*args); end

end

class RSS::Rss::Channel::Item::Enclosure # is documented

  # in file lib/rss/0.9.rb:318
  def self.new(*args); end

end

class RSS::Rss::Channel::Item::Guid # is documented

  # in file lib/rss/2.0.rb:73
  def self.new(*args); end

  # in file lib/rss/2.0.rb:85
  def PermaLink?(); end

  # in file lib/rss/2.0.rb
  def _PermaLink?(); end

end

class RSS::Rss::Channel::Item::Source # is documented

  # in file lib/rss/0.9.rb:285
  def self.new(*args); end

end


class RSS::Rss::Channel::SkipDays::Day # is documented

  # in file lib/rss/0.9.rb:141
  def self.new(*args); end

end


class RSS::Rss::Channel::SkipHours::Hour # is documented

  # in file lib/rss/0.9.rb:168
  def self.new(*args); end

end

class RSS::Rss::Channel::TextInput # is documented

  # in file lib/rss/0.9.rb:385
  def self.new(*args); end

end

module RSS::SetupMaker # is documented

  # in file lib/rss/rss.rb:611
  def setup_maker(maker); end

end

module RSS::SlashModel # is documented

  # in file lib/rss/slash.rb:12
  ELEMENT_INFOS = nil
  # in file lib/rss/slash.rb:21
  def self.append_features(klass); end

end

module RSS::SyndicationModel # is documented

  # in file lib/rss/syndication.rb:14
  ELEMENTS = nil
  # in file lib/rss/syndication.rb:48
  SY_UPDATEPERIOD_AVAILABLE_VALUES = nil
  # in file lib/rss/syndication.rb:16
  def self.append_features(klass); end

end

module RSS::TaxonomyTopicModel # is documented

  # in file lib/rss/taxonomy.rb:91
  def self.append_features(klass); end

end

class RSS::TaxonomyTopicModel::TaxonomyTopic # is documented

  # in file lib/rss/taxonomy.rb:119
  def self.new(*args); end

  # in file lib/rss/taxonomy.rb:104
  def self.required_prefix(); end

  # in file lib/rss/taxonomy.rb:108
  def self.required_uri(); end

  # in file lib/rss/taxonomy.rb:128
  def full_name(); end

  # in file lib/rss/taxonomy.rb:132
  def maker_target(target); end

end

module RSS::TaxonomyTopicsModel # is documented

  # in file lib/rss/taxonomy.rb:28
  def self.append_features(klass); end

end

class RSS::TaxonomyTopicsModel::TaxonomyTopics # is documented

  # in file lib/rss/taxonomy.rb:58
  def self.new(*args); end

  # in file lib/rss/taxonomy.rb:44
  def self.required_prefix(); end

  # in file lib/rss/taxonomy.rb:48
  def self.required_uri(); end

  # in file lib/rss/taxonomy.rb:68
  def full_name(); end

  # in file lib/rss/taxonomy.rb:72
  def maker_target(target); end

  # in file lib/rss/taxonomy.rb:76
  def resources(); end

end

class RSS::TooMuchTagError # is documented

  attr_reader :tag # in file lib/rss/rss.rb:88
  attr_reader :parent # in file lib/rss/rss.rb:88
  # in file lib/rss/rss.rb:89
  def self.new(tag, parent); end

end


class RSS::TrackBackModel10::TrackBackAbout # is documented

  # in file lib/rss/trackback.rb:167
  def self.new(*args); end

  # in file lib/rss/trackback.rb:145
  def self.required_prefix(); end

  # in file lib/rss/trackback.rb:149
  def self.required_uri(); end

  # in file lib/rss/trackback.rb:176
  def full_name(); end

end

class RSS::TrackBackModel10::TrackBackPing # is documented

  # in file lib/rss/trackback.rb:126
  def self.new(*args); end

  # in file lib/rss/trackback.rb:105
  def self.required_prefix(); end

  # in file lib/rss/trackback.rb:109
  def self.required_uri(); end

  # in file lib/rss/trackback.rb:135
  def full_name(); end

end


class RSS::TrackBackModel20::TrackBackAbout # is documented

  # in file lib/rss/trackback.rb:255
  def self.new(*args); end

  # in file lib/rss/trackback.rb:242
  def self.required_prefix(); end

  # in file lib/rss/trackback.rb:246
  def self.required_uri(); end

  # in file lib/rss/trackback.rb:264
  def full_name(); end

end

class RSS::TrackBackModel20::TrackBackPing # is documented

  # in file lib/rss/trackback.rb:218
  def self.new(*args); end

  # in file lib/rss/trackback.rb:205
  def self.required_prefix(); end

  # in file lib/rss/trackback.rb:209
  def self.required_uri(); end

  # in file lib/rss/trackback.rb:227
  def full_name(); end

end


class RSS::UnknownConversionMethodError # is documented

  attr_reader :to # in file lib/rss/rss.rb:148
  attr_reader :from # in file lib/rss/rss.rb:148
  # in file lib/rss/rss.rb:149
  def self.new(to, from); end

end

class RSS::UnknownConvertMethod # is documented

  attr_reader :to # in file lib/rss/rss.rb:148
  attr_reader :from # in file lib/rss/rss.rb:148
  # in file lib/rss/rss.rb:149
  def self.new(to, from); end

end

class RSS::UnknownTagError # is documented

  attr_reader :tag # in file lib/rss/rss.rb:110
  attr_reader :uri # in file lib/rss/rss.rb:110
  # in file lib/rss/rss.rb:111
  def self.new(tag, uri); end

end

class RSS::UnsupportedMakerVersionError # is documented

  attr_reader :version # in file lib/rss/rss.rb:187
  # in file lib/rss/rss.rb:188
  def self.new(version); end

end

module RSS::Utils # is documented

  # in file lib/rss/utils.rb:35
  def element_initialize_arguments?(args); end

  # in file lib/rss/utils.rb:12
  def get_file_and_line_from_caller(i=0); end

end

module RSS::Utils::CSV # is documented

  # in file lib/rss/utils.rb:70
  def parse(value, &block); end

end

module RSS::Utils::InheritedReader # is documented

  # in file lib/rss/utils.rb:98
  def inherited_array_reader(constant_name); end

  # in file lib/rss/utils.rb:104
  def inherited_hash_reader(constant_name); end

  # in file lib/rss/utils.rb:82
  def inherited_reader(constant_name); end

end

module RSS::Utils::YesCleanOther # is documented

  # in file lib/rss/utils.rb:41
  def parse(value); end

end

module RSS::Utils::YesOther # is documented

  # in file lib/rss/utils.rb:59
  def parse(value); end

end


class RSS::XML::Element # is documented

  attr_reader :name # in file lib/rss/xml.rb:8
  attr_reader :prefix # in file lib/rss/xml.rb:8
  attr_reader :uri # in file lib/rss/xml.rb:8
  attr_reader :attributes # in file lib/rss/xml.rb:8
  attr_reader :children # in file lib/rss/xml.rb:8
  # in file lib/rss/xml.rb:9
  def self.new(name, prefix=nil, uri=nil, attributes={}, children=[]); end

  # in file lib/rss/xml.rb:29
  def <<(child); end

  # in file lib/rss/xml.rb:37
  def ==(other); end

  # in file lib/rss/xml.rb:21
  def [](name); end

  # in file lib/rss/xml.rb:25
  def []=(name, value); end

  # in file lib/rss/xml.rb:33
  def each(&block); end

  # in file lib/rss/xml.rb:62
  def full_name(); end

  # in file lib/rss/xml.rb:45
  def to_s(); end

end


class RSS::XMLParserNotFound # is documented

  # in file lib/rss/parser.rb:28
  def self.new(); end

end

class RSS::XMLParserParser # is documented

  # in file lib/rss/xmlparser.rb:63
  def self.listener(); end

end

class RSS::XMLScanListener # is documented

  # in file lib/rss/xmlscanner.rb:37
  ENTITIES = nil
  # in file lib/rss/xmlscanner.rb:95
  def on_attr_charref(code); end

  # in file lib/rss/xmlscanner.rb
  def on_attr_charref_hex(code); end

  # in file lib/rss/xmlscanner.rb:91
  def on_attr_entityref(ref); end

  # in file lib/rss/xmlscanner.rb:87
  def on_attr_value(str); end

  # in file lib/rss/xmlscanner.rb:83
  def on_attribute(name); end

  # in file lib/rss/xmlscanner.rb:73
  def on_charref(code); end

  # in file lib/rss/xmlscanner.rb
  def on_charref_hex(code); end

  # in file lib/rss/xmlscanner.rb:69
  def on_entityref(ref); end

  # in file lib/rss/xmlscanner.rb:65
  def on_etag(name); end

  # in file lib/rss/xmlscanner.rb:79
  def on_stag(name); end

  # in file lib/rss/xmlscanner.rb:101
  def on_stag_end(name); end

  # in file lib/rss/xmlscanner.rb:105
  def on_stag_end_empty(name); end

  # in file lib/rss/xmlscanner.rb:49
  def on_xmldecl_encoding(str); end

  # in file lib/rss/xmlscanner.rb:57
  def on_xmldecl_end(); end

  # in file lib/rss/xmlscanner.rb:53
  def on_xmldecl_standalone(str); end

  # in file lib/rss/xmlscanner.rb:45
  def on_xmldecl_version(str); end

end

class RSS::XMLScanParser # is documented

  # in file lib/rss/xmlscanner.rb:9
  def self.listener(); end

end

class RSS::XMLStyleSheet # is documented

  # in file lib/rss/xml-stylesheet.rb:28
  ATTRIBUTES = nil
  # in file lib/rss/xml-stylesheet.rb:30
  GUESS_TABLE = nil
  attr_accessor :do_validate # in file lib/rss/xml-stylesheet.rb:36
  # in file lib/rss/xml-stylesheet.rb:37
  def self.new(*attrs); end

  # in file lib/rss/xml-stylesheet.rb:79
  def alternate=(value); end

  # in file lib/rss/xml-stylesheet.rb:70
  def href=(value); end

  # in file lib/rss/xml-stylesheet.rb:91
  def setup_maker(maker); end

  # in file lib/rss/xml-stylesheet.rb:55
  def to_s(); end

end

module RSS::XMLStyleSheetMixin # is documented

  attr_accessor :xml_stylesheets # in file lib/rss/xml-stylesheet.rb:6
  # in file lib/rss/xml-stylesheet.rb:7
  def self.new(*args); end

end



class Racc::Parser # is documented

  # in file lib/racc/parser.rb:183
  Racc_Runtime_Version = nil
  # in file lib/racc/parser.rb:184
  Racc_Runtime_Revision = nil
  # in file lib/racc/parser.rb:186
  Racc_Runtime_Core_Version_R = nil
  # in file lib/racc/parser.rb:187
  Racc_Runtime_Core_Revision_R = nil
  # in file lib/racc/parser.rb:273
  def _racc_do_parse_rb(arg, in_debug); end

  # in file lib/racc/parser.rb:473
  def _racc_do_reduce(arg, act); end

  # in file lib/racc/parser.rb:228
  def _racc_init_sysvars(); end

  # in file lib/racc/parser.rb:216
  def _racc_setup(); end

  # in file lib/racc/parser.rb:322
  def _racc_yyparse_rb(recv, mid, arg, c_debug); end

  # in file lib/racc/parser.rb:578
  def racc_accept(); end

  # in file lib/racc/parser.rb:583
  def racc_e_pop(state, tstack, vstack); end

  # in file lib/racc/parser.rb:590
  def racc_next_state(curstate, state); end

  # in file lib/racc/parser.rb:596
  def racc_print_stacks(t, v); end

  # in file lib/racc/parser.rb:605
  def racc_print_states(s); end

  # in file lib/racc/parser.rb:564
  def racc_reduce(toks, sim, tstack, vstack); end

  # in file lib/racc/parser.rb:558
  def racc_shift(tok, tstack, vstack); end

  # in file lib/racc/parser.rb:612
  def racc_token2str(tok); end

end


module Rake::AltSystem # is documented

  # in file lib/rake/alt_system.rb:32
  WINDOWS = nil
  # in file lib/rake/alt_system.rb:43
  RUNNABLE_EXTS = nil
  # in file lib/rake/alt_system.rb:44
  RUNNABLE_PATTERN = nil
  # in file lib/rake/alt_system.rb:36
  def self.define_module_function(name, &block); end

  # in file lib/rake/alt_system.rb:98
  def backticks(cmd); end

  # in file lib/rake/alt_system.rb:71
  def find_runnable(file); end

  # in file lib/rake/alt_system.rb:51
  def repair_command(cmd); end

  # in file lib/rake/alt_system.rb:84
  def system(cmd, *args); end

end

class Rake::Application # is documented

  # in file lib/rake/application.rb:38
  DEFAULT_RAKEFILES = nil
  # in file lib/rake/application.rb:285
  def dynamic_width_stty(); end

  # in file lib/rake/application.rb:289
  def dynamic_width_tput(); end

  # in file lib/rake/application.rb:569
  def find_rakefile_location(); end

  # in file lib/rake/application.rb:146
  def parse_task_string(string); end

  # in file lib/rake/application.rb:583
  def print_rakefile_directory(location); end

  # in file lib/rake/application.rb:689
  def rakefile_location(backtrace=caller); end

  # in file lib/rake/application.rb:269
  def terminal_width(); end

  # in file lib/rake/application.rb:319
  def trace(*strings); end

  # in file lib/rake/application.rb:301
  def truncate(string, width); end

  # in file lib/rake/application.rb:293
  def unix?(); end

  # in file lib/rake/application.rb:297
  def windows?(); end

end

module Rake::Backtrace # is documented

  # in file lib/rake/backtrace.rb:3
  SUPPRESSED_PATHS = nil
  # in file lib/rake/backtrace.rb:10
  SUPPRESS_PATTERN = nil
  # in file lib/rake/backtrace.rb:12
  def self.collapse(backtrace); end

end


class Rake::CompositePublisher # is documented

  # in file lib/rake/contrib/compositepublisher.rb:5
  def self.new(); end

end


class Rake::DefaultLoader # is documented

  # in file lib/rake/default_loader.rb:5
  def load(fn); end

end

class Rake::EarlyTime # is documented

  # in file lib/rake/early_time.rb:8
  def <=>(other); end

  # in file lib/rake/early_time.rb:12
  def to_s(); end

end


class Rake::FileList # is documented

  # in file lib/rake/file_list.rb:61
  DELEGATING_METHODS = nil
  # in file lib/rake/file_list.rb:211
  def resolve_add(fn); end

end


module Rake::FileUtilsExt # is documented

  # in file lib/rake/file_utils_ext.rb:16
  DEFAULT = nil
  attr_accessor :verbose_flag # in file lib/rake/file_utils_ext.rb:13
  attr_accessor :nowrite_flag # in file lib/rake/file_utils_ext.rb:13
end

class Rake::FtpFile # is documented

  attr_reader :name # in file lib/rake/contrib/ftptools.rb:15
  attr_reader :size # in file lib/rake/contrib/ftptools.rb:15
  attr_reader :owner # in file lib/rake/contrib/ftptools.rb:15
  attr_reader :group # in file lib/rake/contrib/ftptools.rb:15
  attr_reader :time # in file lib/rake/contrib/ftptools.rb:15
  # in file lib/rake/contrib/ftptools.rb:17
  def self.date(); end

  # in file lib/rake/contrib/ftptools.rb:25
  def self.new(path, entry); end

  # in file lib/rake/contrib/ftptools.rb:21
  def self.time(); end

  # in file lib/rake/contrib/ftptools.rb:36
  def directory?(); end

  # in file lib/rake/contrib/ftptools.rb:40
  def mode(); end

  # in file lib/rake/contrib/ftptools.rb:32
  def path(); end

  # in file lib/rake/contrib/ftptools.rb:44
  def symlink?(); end

end


class Rake::InvocationChain # is documented

  # in file lib/rake/invocation_chain.rb:49
  EMPTY = nil
  # in file lib/rake/invocation_chain.rb:27
  def self.append(value, chain); end

  # in file lib/rake/invocation_chain.rb:7
  def self.new(value, tail); end

  # in file lib/rake/invocation_chain.rb:16
  def append(value); end

  # in file lib/rake/invocation_chain.rb:12
  def member?(obj); end

  # in file lib/rake/invocation_chain.rb:23
  def to_s(); end

end

class Rake::InvocationChain::EmptyInvocationChain # is documented

  # in file lib/rake/invocation_chain.rb:41
  def append(value); end

  # in file lib/rake/invocation_chain.rb:38
  def member?(obj); end

  # in file lib/rake/invocation_chain.rb:44
  def to_s(); end

end


class Rake::MakefileLoader # is documented

  # in file lib/rake/loaders/makefile.rb:7
  SPACE_MARK = nil
end



class Rake::PackageTask # is documented

  # in file lib/rake/packagetask.rb:164
  def package_dir_path(); end

  # in file lib/rake/packagetask.rb:160
  def package_name(); end

  # in file lib/rake/packagetask.rb:176
  def tar_bz2_file(); end

  # in file lib/rake/packagetask.rb:172
  def tar_gz_file(); end

  # in file lib/rake/packagetask.rb:168
  def tgz_file(); end

  # in file lib/rake/packagetask.rb:180
  def zip_file(); end

end



class Rake::PseudoStatus # is documented

  attr_reader :exitstatus # in file lib/rake/pseudo_status.rb:6
  # in file lib/rake/pseudo_status.rb:7
  def self.new(code=0); end

  # in file lib/rake/pseudo_status.rb:13
  def >>(n); end

  # in file lib/rake/pseudo_status.rb:19
  def exited?(); end

  # in file lib/rake/pseudo_status.rb:16
  def stopped?(); end

  # in file lib/rake/pseudo_status.rb:10
  def to_i(); end

end


class Rake::RubyForgePublisher # is documented

  attr_reader :project # in file lib/rake/contrib/rubyforgepublisher.rb:6
  attr_reader :proj_id # in file lib/rake/contrib/rubyforgepublisher.rb:6
  attr_reader :user # in file lib/rake/contrib/rubyforgepublisher.rb:6
  # in file lib/rake/contrib/rubyforgepublisher.rb:8
  def self.new(projname, user); end

end

class Rake::RuleRecursionOverflowError # is documented

  # in file lib/rake/rule_recursion_overflow_error.rb:6
  def self.new(*args); end

  # in file lib/rake/rule_recursion_overflow_error.rb:11
  def add_target(target); end

  # in file lib/rake/rule_recursion_overflow_error.rb:15
  def message(); end

end

class Rake::SshDirPublisher # is documented

  # in file lib/rake/contrib/sshpublisher.rb:11
  def self.new(host, remote_dir, local_dir); end

  # in file lib/rake/contrib/sshpublisher.rb:17
  def upload(); end

end


class Rake::SshFreshDirPublisher # is documented

  # in file lib/rake/contrib/sshpublisher.rb:24
  def upload(); end

end

class Rake::Task # is documented

  # in file lib/rake/task.rb:44
  def inspect(); end

  # in file lib/rake/task.rb:50
  def sources(); end

end


class Rake::TaskArguments # is documented

  attr_reader :names # in file lib/rake/task_arguments.rb:9
  # in file lib/rake/task_arguments.rb:42
  def each(&block); end

  # in file lib/rake/task_arguments.rb:62
  def inspect(); end

  # in file lib/rake/task_arguments.rb:68
  def lookup(name); end

  # in file lib/rake/task_arguments.rb:50
  def method_missing(sym, *args); end

  # in file lib/rake/task_arguments.rb:54
  def to_hash(); end

  # in file lib/rake/task_arguments.rb:58
  def to_s(); end

  # in file lib/rake/task_arguments.rb:46
  def values_at(*keys); end

end


module Rake::TaskManager # is documented

  # in file lib/rake/task_manager.rb:9
  def self.new(); end

  # in file lib/rake/task_manager.rb:17
  def create_rule(*args, &block); end

  # in file lib/rake/task_manager.rb:23
  def define_task(task_class, *args, &block); end

  # in file lib/rake/task_manager.rb:52
  def synthesize_file_task(task_name); end

end

class Rake::TestTask # is documented

  # in file lib/rake/testtask.rb:132
  def file_list_string(); end

  # in file lib/rake/testtask.rb:128
  def lib_path(); end

  # in file lib/rake/testtask.rb:121
  def ruby_opts_string(); end

  # in file lib/rake/testtask.rb:156
  def ruby_version(); end

  # in file lib/rake/testtask.rb:160
  def run_code(); end

end


class Resolv::DNS::Resource::IN::A # is documented

  # in file lib/resolv.rb:1981
  TypeValue = nil
  # in file lib/resolv.rb:1982
  ClassValue = nil
end

class Resolv::DNS::Resource::IN::AAAA # is documented

  # in file lib/resolv.rb:2058
  TypeValue = nil
  # in file lib/resolv.rb:2059
  ClassValue = nil
end

class Resolv::DNS::Resource::IN::SRV # is documented

  # in file lib/resolv.rb:2090
  TypeValue = nil
  # in file lib/resolv.rb:2091
  ClassValue = nil
end

class Resolv::DNS::Resource::IN::WKS # is documented

  # in file lib/resolv.rb:2010
  TypeValue = nil
  # in file lib/resolv.rb:2011
  ClassValue = nil
  # in file lib/resolv.rb:2014
  def self.new(address, protocol, bitmap); end

end

class Resolv::DNS::Resource::MINFO # is documented

  # in file lib/resolv.rb:1853
  def self.new(rmailbx, emailbx); end

end


class Resolv::DNS::Resource::TXT # is documented

  # in file lib/resolv.rb:1925
  def self.new(first_string, *rest_strings); end

end

class Resolv::Hosts # is documented

  # in file lib/resolv.rb:170
  DefaultFileName = nil
end

class Resolv::IPv4 # is documented

  # in file lib/resolv.rb:2172
  Regex = nil
  # in file lib/resolv.rb:2174
  def self.create(arg); end

end


class Rinda::TupleBag::TupleBin # is documented

  # in file lib/rinda/tuplespace.rb:295
  def self.new(); end

  # in file lib/rinda/tuplespace.rb:299
  def add(tuple); end

  # in file lib/rinda/tuplespace.rb:303
  def delete(tuple); end

  # in file lib/rinda/tuplespace.rb:308
  def find(); end

end

class Rinda::TupleEntry # is documented

  attr_accessor :expires # in file lib/rinda/tuplespace.rb:18
end



class Rinda::WaitTemplateEntry # is documented

  attr_reader :found # in file lib/rinda/tuplespace.rb:185
  # in file lib/rinda/tuplespace.rb:187
  def self.new(place, ary, expires=nil); end

  # in file lib/rinda/tuplespace.rb:203
  def read(tuple); end

  # in file lib/rinda/tuplespace.rb:208
  def signal(); end

  # in file lib/rinda/tuplespace.rb:199
  def wait(); end

end

# in files:
#   lib/profile.rb

module RubyVM
end

class SOCKSSocket # is documented

  # in file lib/resolv-replace.rb:71
  def self.new(host, serv); end

end

class Shell # is documented

  attr_accessor :cascade # in file lib/shell.rb:109
  attr_accessor :debug # in file lib/shell.rb:109
  attr_accessor :verbose # in file lib/shell.rb:109
  attr_accessor :debug? # in file lib/shell.rb
  attr_accessor :verbose? # in file lib/shell.rb
  attr_accessor :record_separator # in file lib/shell.rb:214
  attr_accessor :verbose # in file lib/shell.rb:215
  attr_accessor :debug # in file lib/shell.rb:215
  attr_accessor :verbose? # in file lib/shell.rb
  attr_accessor :debug? # in file lib/shell.rb
  attr_reader :command_processor # in file lib/shell.rb:225
  attr_reader :process_controller # in file lib/shell.rb:226
  attr_reader :dir_stack # in file lib/shell.rb:250
  attr_reader :dirs # in file lib/shell.rb
  # in file lib/shell.rb:116
  def self.debug=(val); end

  # in file lib/shell.rb:160
  def self.default_record_separator(); end

  # in file lib/shell.rb:168
  def self.default_record_separator=(rs); end

  # in file lib/shell.rb:392
  def self.notify(*opts); end

  # in file lib/shell.rb:217
  def debug=(val); end

  # in file lib/shell.rb:228
  def expand_path(path); end

  # in file lib/shell.rb:384
  def inspect(); end

end

class Shell::AppendFile # is documented

  # in file lib/shell/builtin-command.rb:117
  def self.new(sh, to_filename, filter); end

  # in file lib/shell/builtin-command.rb:123
  def input=(filter); end

end

class Shell::AppendIO # is documented

  # in file lib/shell/builtin-command.rb:101
  def self.new(sh, io, filter); end

  # in file lib/shell/builtin-command.rb:107
  def input=(filter); end

end

class Shell::BuiltInCommand # is documented

  # in file lib/shell/builtin-command.rb:19
  def active?(); end

  # in file lib/shell/builtin-command.rb:16
  def wait?(); end

end

class Shell::Cat # is documented

  # in file lib/shell/builtin-command.rb:49
  def self.new(sh, *filenames); end

  # in file lib/shell/builtin-command.rb:54
  def each(rs = nil); end

end

class Shell::CommandProcessor # is documented

  # in file lib/shell/command-processor.rb:34
  NoDelegateMethods = nil
  # in file lib/shell/command-processor.rb:39
  def self.initialize(); end

  # in file lib/shell/command-processor.rb:48
  def self.method_added(id); end

  # in file lib/shell/command-processor.rb:69
  def self.new(shell); end

  # in file lib/shell/command-processor.rb:317
  def append(to, filter); end

end

class Shell::Concat # is documented

  # in file lib/shell/builtin-command.rb:149
  def self.new(sh, *jobs); end

  # in file lib/shell/builtin-command.rb:154
  def each(rs = nil); end

end

class Shell::Echo # is documented

  # in file lib/shell/builtin-command.rb:35
  def self.new(sh, *strings); end

  # in file lib/shell/builtin-command.rb:40
  def each(rs = nil); end

end


class Shell::Filter # is documented

  attr_reader :input # in file lib/shell/filter.rb:27
  # in file lib/shell/filter.rb:22
  def self.new(sh); end

  # in file lib/shell/filter.rb:29
  def input=(filter); end

  # in file lib/shell/filter.rb:129
  def inspect(); end

  # in file lib/shell/filter.rb:117
  def to_a(); end

  # in file lib/shell/filter.rb:123
  def to_s(); end

end

class Shell::Glob # is documented

  # in file lib/shell/builtin-command.rb:66
  def self.new(sh, pattern); end

  # in file lib/shell/builtin-command.rb:72
  def each(rs = nil); end

end

class Shell::ProcessController # is documented

  attr_reader :shell # in file lib/shell/process-controller.rb:103
  # in file lib/shell/process-controller.rb:38
  def self.activate(pc); end

  # in file lib/shell/process-controller.rb:32
  def self.active_process_controllers(); end

  # in file lib/shell/process-controller.rb:64
  def self.block_output_synchronize(&b); end

  # in file lib/shell/process-controller.rb:56
  def self.each_active_object(); end

  # in file lib/shell/process-controller.rb:45
  def self.inactivate(pc); end

  # in file lib/shell/process-controller.rb:93
  def self.new(shell); end

  # in file lib/shell/process-controller.rb:68
  def self.wait_to_finish_all_process_controllers(); end

  # in file lib/shell/process-controller.rb:182
  def active_job?(job); end

  # in file lib/shell/process-controller.rb:114
  def active_jobs(); end

  # in file lib/shell/process-controller.rb:128
  def active_jobs_exist?(); end

  # in file lib/shell/process-controller.rb:105
  def jobs(); end

  # in file lib/shell/process-controller.rb:122
  def jobs_exist?(); end

  # in file lib/shell/process-controller.rb:176
  def waiting_job?(job); end

  # in file lib/shell/process-controller.rb:118
  def waiting_jobs(); end

  # in file lib/shell/process-controller.rb:134
  def waiting_jobs_exist?(); end

end

class Shell::SystemCommand # is documented

  attr_reader :command # in file lib/shell/system-command.rb:30
  attr_reader :name # in file lib/shell/system-command.rb
  # in file lib/shell/system-command.rb:16
  def self.new(sh, command, *opts); end

  # in file lib/shell/system-command.rb:37
  def active?(); end

  # in file lib/shell/system-command.rb:62
  def flush(); end

  # in file lib/shell/system-command.rb:41
  def input=(inp); end

  # in file lib/shell/system-command.rb:77
  def kill(sig); end

  # in file lib/shell/system-command.rb:48
  def start(); end

  # in file lib/shell/system-command.rb:109
  def start_export(); end

  # in file lib/shell/system-command.rb:83
  def start_import(); end

  # in file lib/shell/system-command.rb:66
  def terminate(); end

  # in file lib/shell/system-command.rb:33
  def wait?(); end

end

class Shell::Tee # is documented

  # in file lib/shell/builtin-command.rb:133
  def self.new(sh, filename); end

  # in file lib/shell/builtin-command.rb:138
  def each(rs = nil); end

end

class Shell::Void # is documented

  # in file lib/shell/builtin-command.rb:25
  def self.new(sh, *opts); end

  # in file lib/shell/builtin-command.rb:29
  def each(rs = nil); end

end


class SshDirPublisher # is documented

  # in file lib/rake/contrib/publisher.rb:37
  def self.new(host, remote_dir, local_dir); end

  # in file lib/rake/contrib/publisher.rb:43
  def upload(); end

end


class SshFreshDirPublisher # is documented

  # in file lib/rake/contrib/publisher.rb:50
  def upload(); end

end




module Sync_m # is documented

  # in file lib/sync.rb:50
  SH = nil
  # in file lib/sync.rb:51
  EX = nil
  attr_accessor :sync_mode # in file lib/sync.rb:240
  attr_accessor :sync_waiting # in file lib/sync.rb:242
  attr_accessor :sync_upgrade_waiting # in file lib/sync.rb:243
  attr_accessor :sync_sh_locker # in file lib/sync.rb:244
  attr_accessor :sync_ex_locker # in file lib/sync.rb:245
  attr_accessor :sync_ex_count # in file lib/sync.rb:246
  # in file lib/sync.rb:89
  def self.append_features(cl); end

  # in file lib/sync.rb:77
  def self.define_aliases(cl); end

  # in file lib/sync.rb:97
  def self.extend_object(obj); end

  # in file lib/sync.rb:266
  def self.new(*args); end

  # in file lib/sync.rb:124
  def sync_exclusive?(); end

  # in file lib/sync.rb:102
  def sync_extend(); end

  # in file lib/sync.rb:248
  def sync_inspect(); end

  # in file lib/sync.rb:136
  def sync_lock(m = EX); end

  # in file lib/sync.rb:120
  def sync_shared?(); end

  # in file lib/sync.rb:229
  def sync_synchronize(mode = EX); end

  # in file lib/sync.rb:164
  def sync_unlock(m = EX); end

end

class Sync_m::Err # is documented

  # in file lib/sync.rb:55
  def self.Fail(*opt); end

end

class Sync_m::Err::LockModeFailer # is documented

  # in file lib/sync.rb:67
  Message = nil
  # in file lib/sync.rb:68
  def self.Fail(mode); end

end

class Sync_m::Err::UnknownLocker # is documented

  # in file lib/sync.rb:60
  Message = nil
  # in file lib/sync.rb:61
  def self.Fail(th); end

end


module Synchronizer_m # is documented

  # in file lib/sync.rb:50
  SH = nil
  # in file lib/sync.rb:51
  EX = nil
  attr_accessor :sync_mode # in file lib/sync.rb:240
  attr_accessor :sync_waiting # in file lib/sync.rb:242
  attr_accessor :sync_upgrade_waiting # in file lib/sync.rb:243
  attr_accessor :sync_sh_locker # in file lib/sync.rb:244
  attr_accessor :sync_ex_locker # in file lib/sync.rb:245
  attr_accessor :sync_ex_count # in file lib/sync.rb:246
  # in file lib/sync.rb:89
  def self.append_features(cl); end

  # in file lib/sync.rb:77
  def self.define_aliases(cl); end

  # in file lib/sync.rb:97
  def self.extend_object(obj); end

  # in file lib/sync.rb:266
  def self.new(*args); end

  # in file lib/sync.rb:124
  def sync_exclusive?(); end

  # in file lib/sync.rb:102
  def sync_extend(); end

  # in file lib/sync.rb:248
  def sync_inspect(); end

  # in file lib/sync.rb:136
  def sync_lock(m = EX); end

  # in file lib/sync.rb:120
  def sync_shared?(); end

  # in file lib/sync.rb:229
  def sync_synchronize(mode = EX); end

  # in file lib/sync.rb:164
  def sync_unlock(m = EX); end

end

module Sys # is documented

  # in file lib/rake/contrib/sys.rb:26
  RUBY = nil
end

class TCPSocket # is documented

  # in file lib/resolv-replace.rb:21
  def self.new(host, serv, *rest); end

end



class TempIO # is documented

  # in file lib/rubygems/test_utilities.rb:168
  def self.new(string = ''); end

  # in file lib/rubygems/test_utilities.rb:175
  def string(); end

end

class Tempfile # is documented

  # in file lib/tempfile.rb:264
  def inspect(); end

end



module Test::Unit # is documented

  # in file lib/test/unit.rb:10
  TEST_UNIT_IMPLEMENTATION = nil
end


class Test::Unit::AutoRunner # is documented

  attr_accessor :to_run # in file lib/test/unit.rb:806
  attr_accessor :options # in file lib/test/unit.rb:806
  # in file lib/test/unit.rb:808
  def self.new(force_standalone = false, default_dir = nil, argv = ARGV); end

  # in file lib/test/unit.rb:837
  def self.run(*args); end

  # in file lib/test/unit.rb:825
  def process_args(*args); end

  # in file lib/test/unit.rb:830
  def run(); end

end


module Test::Unit::GCStressOption # is documented

  # in file lib/test/unit.rb:217
  def non_options(files, options); end

  # in file lib/test/unit.rb:210
  def setup_options(parser, options); end

end

module Test::Unit::GlobOption # is documented

  # in file lib/test/unit.rb:167
  def non_options(files, options); end

  # in file lib/test/unit.rb:157
  def setup_options(parser, options); end

end

module Test::Unit::LoadPathOption # is documented

  # in file lib/test/unit.rb:201
  def setup_options(parser, options); end

end

module Test::Unit::Options # is documented

  # in file lib/test/unit.rb:33
  def self.new(*, &block); end

  # in file lib/test/unit.rb:39
  def option_parser(); end

  # in file lib/test/unit.rb:43
  def process_args(args = []); end

end

class Test::Unit::ProxyError # is documented

  attr_accessor :message # in file lib/test/unit.rb:848
  attr_accessor :backtrace # in file lib/test/unit.rb:848
  # in file lib/test/unit.rb:843
  def self.new(ex); end

end

module Test::Unit::RequireFiles # is documented

  # in file lib/test/unit.rb:236
  def non_options(files, options); end

end

module Test::Unit::RunCount # is documented

  # in file lib/test/unit.rb:15
  def self.have_run?(); end

  # in file lib/test/unit.rb:24
  def self.run_once(); end

  # in file lib/test/unit.rb:19
  def run(*); end

end

class Test::Unit::Runner # is documented

  # in file lib/test/unit.rb:363
  def self.autorun(); end

  # in file lib/test/unit.rb:676
  def _prepare_run(suites, type); end

  # in file lib/test/unit.rb:723
  def _print(s); end

  # in file lib/test/unit.rb:564
  def _run_parallel(suites, type, result); end

  # in file lib/test/unit.rb:647
  def _run_suites(suites, type); end

  # in file lib/test/unit.rb:425
  def add_status(line); end

  # in file lib/test/unit.rb:372
  def after_worker_down(worker, e=nil, c=false); end

  # in file lib/test/unit.rb:449
  def after_worker_quit(worker); end

  # in file lib/test/unit.rb:521
  def deal(io, type, result, rep, shutting_down = false); end

  # in file lib/test/unit.rb:444
  def del_jobs_status(); end

  # in file lib/test/unit.rb:400
  def del_status_line(); end

  # in file lib/test/unit.rb:473
  def delete_worker(worker); end

  # in file lib/test/unit.rb:726
  def failed(s); end

  # in file lib/test/unit.rb:437
  def jobs_status(); end

  # in file lib/test/unit.rb:457
  def launch_worker(); end

  # in file lib/test/unit.rb:713
  def new_test(s); end

  # in file lib/test/unit.rb:672
  def output(); end

  # in file lib/test/unit.rb:411
  def put_status(line); end

  # in file lib/test/unit.rb:479
  def quit_workers(); end

  # in file lib/test/unit.rb:773
  def run(*args); end

  # in file lib/test/unit.rb:505
  def start_watchdog(); end

  # in file lib/test/unit.rb:767
  def status(*args); end

  # in file lib/test/unit.rb:724
  def succeed(); end

  # in file lib/test/unit.rb:386
  def terminal_width(); end

  # in file lib/test/unit.rb:718
  def update_status(s); end

end

class Test::Unit::Runner::Worker # is documented

  attr_reader :quit_called # in file lib/test/unit.rb:270
  attr_reader :io # in file lib/test/unit.rb:347
  attr_reader :pid # in file lib/test/unit.rb:347
  attr_accessor :status # in file lib/test/unit.rb:348
  attr_accessor :file # in file lib/test/unit.rb:348
  attr_accessor :real_file # in file lib/test/unit.rb:348
  attr_accessor :loadpath # in file lib/test/unit.rb:348
  # in file lib/test/unit.rb:263
  def self.launch(ruby,args=[]); end

  # in file lib/test/unit.rb:272
  def self.new(io, pid, status); end

  # in file lib/test/unit.rb:314
  def close(); end

  # in file lib/test/unit.rb:332
  def died(*additional); end

  # in file lib/test/unit.rb:303
  def hook(id,&block); end

  # in file lib/test/unit.rb:327
  def kill(); end

  # in file lib/test/unit.rb:283
  def puts(*args); end

  # in file lib/test/unit.rb:320
  def quit(); end

  # in file lib/test/unit.rb:309
  def read(); end

  # in file lib/test/unit.rb:287
  def run(task,type); end

  # in file lib/test/unit.rb:339
  def to_s(); end

end

class Test::Unit::StatusLineOutput # is documented

  # in file lib/test/unit.rb:783
  def method_missing(*a, &b); end

  # in file lib/test/unit.rb:785
  def print(s); end

  # in file lib/test/unit.rb:781
  def puts(*a); end

  # in file lib/test/unit.rb:782
  def respond_to_missing?(*a); end

end

class Test::Unit::TestCase # is documented

  # in file lib/test/unit/testcase.rb:24
  def self.method_added(name); end

  # in file lib/test/unit/testcase.rb:20
  def self.test_order(); end

  # in file lib/test/unit/parallel.rb:170
  def on_parallel_worker?(); end

end

class Test::Unit::Worker # is documented

  # in file lib/test/unit/parallel.rb:152
  def _report(res, *args); end

  # in file lib/test/unit/parallel.rb:27
  def _run_suite(suite, type); end

  # in file lib/test/unit/parallel.rb:21
  def _run_suites(suites, type); end

  # in file lib/test/unit/parallel.rb:15
  def increment_io(orig); end

  # in file lib/test/unit/parallel.rb:84
  def run(args = []); end

end

class ThWait # is documented

  # in file lib/thwait.rb:28
  RCS_ID = nil
end


class ThreadsWait # is documented

  # in file lib/thwait.rb:28
  RCS_ID = nil
end

class Time # is documented

  # in file lib/time.rb:177
  LeapYearMonthDays = nil
  # in file lib/time.rb:178
  CommonYearMonthDays = nil
  # in file lib/time.rb:404
  MonthValue = nil
  # in file lib/time.rb:580
  RFC2822_DAY_NAME = nil
  # in file lib/time.rb:583
  RFC2822_MONTH_NAME = nil
  # in file lib/rss/rss.rb:6
  def self.w3cdtf(date); end

  # in file lib/rake/ext/time.rb:8
  def <=>(other); end

  # in file lib/rake/ext/time.rb
  def rake_original_time_compare(other); end

  # in file lib/rss/rss.rb:37
  def w3cdtf(); end

end



class Tracer # is documented

  # in file lib/tracer.rb:87
  stdout = nil
  # in file lib/tracer.rb:88
  verbose = nil
  # in file lib/tracer.rb:89
  display_process_id = nil
  # in file lib/tracer.rb:90
  display_thread_id = nil
  # in file lib/tracer.rb:91
  display_c_call = nil
end

class UDPSocket # is documented

  # in file lib/resolv-replace.rb:31
  def bind(host, port); end

  # in file lib/resolv-replace.rb:39
  def connect(host, port); end

  # in file lib/resolv-replace.rb:46
  def send(mesg, flags, *rest); end

end

class URI::FTP # is documented

  # in file lib/uri/ftp.rb:237
  def set_path(v); end

  # in file lib/uri/ftp.rb:242
  def to_s(); end

end

class URI::Generic # is documented

  # in file lib/uri/generic.rb:1510
  def eql?(oth); end

  # in file lib/uri/generic.rb:1506
  def hash(); end

  # in file lib/uri/generic.rb:1566
  def inspect(); end

end

class URI::Parser # is documented

  # in file lib/uri/common.rb:335
  def inspect(); end

end

class Vector # is documented

  # in file lib/matrix.rb:1820
  def elements_to_f(); end

  # in file lib/matrix.rb:1825
  def elements_to_i(); end

  # in file lib/matrix.rb:1830
  def elements_to_r(); end

  # in file lib/matrix.rb:1650
  def eql?(other); end

end

# in files:
#   lib/webrick/ssl.rb

module WEBrick::Config::OpenSSL
end

# in files:
#   lib/weakref.rb

module WeakRef::ObjectSpace
end



class XML::Parser # is documented

  # in file lib/rss/xmlparser.rb:23
  Error = nil
end

class XMLRPC::BasicServer # is documented

  # in file lib/xmlrpc/server.rb:38
  ERR_METHOD_MISSING = nil
  # in file lib/xmlrpc/server.rb:39
  ERR_UNCAUGHT_EXCEPTION = nil
  # in file lib/xmlrpc/server.rb:40
  ERR_MC_WRONG_PARAM = nil
  # in file lib/xmlrpc/server.rb:41
  ERR_MC_MISSING_PARAMS = nil
  # in file lib/xmlrpc/server.rb:42
  ERR_MC_MISSING_METHNAME = nil
  # in file lib/xmlrpc/server.rb:43
  ERR_MC_RECURSIVE_CALL = nil
  # in file lib/xmlrpc/server.rb:44
  ERR_MC_WRONG_PARAM_PARAMS = nil
  # in file lib/xmlrpc/server.rb:45
  ERR_MC_EXPECTED_STRUCT = nil
  # in file lib/xmlrpc/server.rb:283
  def process(data); end

end

class XMLRPC::CGIServer # is documented

  # in file lib/xmlrpc/server.rb:395
  def self.new(*a); end

end

class XMLRPC::Client # is documented

  # in file lib/xmlrpc/client.rb:55
  USER_AGENT = nil
end


module XMLRPC::Config # is documented

  # in file lib/xmlrpc/config.rb:25
  ENABLE_NIL_PARSER = nil
end


class XMLRPC::Create # is documented

  # in file lib/xmlrpc/create.rb:105
  def self.new(xml_writer = nil); end

  # in file lib/xmlrpc/create.rb:110
  def methodCall(name, *params); end

end


class XMLRPC::FaultException # is documented

  attr_reader :faultCode # in file lib/xmlrpc/parser.rb:53
  attr_reader :faultString # in file lib/xmlrpc/parser.rb:53
end

class XMLRPC::Marshal # is documented

  # in file lib/xmlrpc/marshal.rb
  def self.dump( param ); end

  # in file lib/xmlrpc/marshal.rb:20
  def self.dump_call( methodName, *params ); end

  # in file lib/xmlrpc/marshal.rb:24
  def self.dump_response( param ); end

  # in file lib/xmlrpc/marshal.rb
  def self.load( stringOrReadable ); end

  # in file lib/xmlrpc/marshal.rb:28
  def self.load_call( stringOrReadable ); end

  # in file lib/xmlrpc/marshal.rb:32
  def self.load_response( stringOrReadable ); end

  # in file lib/xmlrpc/marshal.rb:41
  def self.new( parser = nil, writer = nil ); end

  # in file lib/xmlrpc/marshal.rb:46
  def dump_call( methodName, *params ); end

  # in file lib/xmlrpc/marshal.rb:50
  def dump_response( param ); end

end



module XMLRPC::ParseContentType # is documented

  # in file lib/xmlrpc/utils.rb:164
  def parse_content_type(str); end

end


class XMLRPC::Service::BasicInterface # is documented

  attr_reader :prefix # in file lib/xmlrpc/utils.rb:70
  attr_reader :methods # in file lib/xmlrpc/utils.rb:70
  # in file lib/xmlrpc/utils.rb:72
  def self.new(prefix); end

  # in file lib/xmlrpc/utils.rb:77
  def add_method(sig, help=nil, meth_name=nil); end

end

class XMLRPC::Service::Interface # is documented

  # in file lib/xmlrpc/utils.rb:112
  def self.new(prefix, &p); end

  # in file lib/xmlrpc/utils.rb:118
  def get_methods(obj, delim="."); end

end

class XMLRPC::Service::PublicInstanceMethodsInterface # is documented

  # in file lib/xmlrpc/utils.rb:134
  def self.new(prefix); end

  # in file lib/xmlrpc/utils.rb:138
  def get_methods(obj, delim="."); end

end

class XMLRPC::WEBrickServlet # is documented

  # in file lib/xmlrpc/server.rb:628
  def self.new(*a); end

  # in file lib/xmlrpc/server.rb:639
  def get_instance(config, *options); end

  # in file lib/xmlrpc/server.rb:662
  def service(request, response); end

end

module XMLRPC::XMLParser # is documented

  # in file lib/xmlrpc/parser.rb:820
  Classes = nil
end

class XMLRPC::XMLParser::AbstractStreamParser # is documented

  # in file lib/xmlrpc/parser.rb:499
  def parseMethodCall(str); end

  # in file lib/xmlrpc/parser.rb:484
  def parseMethodResponse(str); end

end

class XMLRPC::XMLParser::AbstractTreeParser # is documented

  # in file lib/xmlrpc/parser.rb:196
  def parseMethodCall(str); end

  # in file lib/xmlrpc/parser.rb:192
  def parseMethodResponse(str); end

end

class XMLRPC::XMLParser::NQXMLParser # is documented

  # in file lib/xmlrpc/parser.rb:697
  def self.new(); end

end

class XMLRPC::XMLParser::NQXMLStreamParser # is documented

  # in file lib/xmlrpc/parser.rb:615
  def self.new(); end

end

class XMLRPC::XMLParser::NQXMLStreamParser::XMLRPCParser # is documented

  # in file lib/xmlrpc/parser.rb:623
  def parse(str); end

end

class XMLRPC::XMLParser::NQXMLTreeParser # is documented

  # in file lib/xmlrpc/parser.rb:697
  def self.new(); end

end

class XMLRPC::XMLParser::REXMLStreamParser # is documented

  # in file lib/xmlrpc/parser.rb:724
  def self.new(); end

end

class XMLRPC::XMLParser::REXMLStreamParser::StreamListener # is documented

  # in file lib/xmlrpc/parser.rb:737
  def method_missing(*a); end

  # in file lib/xmlrpc/parser.rb:741
  def parse(str); end

end

module XMLRPC::XMLParser::StreamParserMixin # is documented

  attr_reader :params # in file lib/xmlrpc/parser.rb:508
  attr_reader :method_name # in file lib/xmlrpc/parser.rb:509
  attr_reader :fault # in file lib/xmlrpc/parser.rb:510
  # in file lib/xmlrpc/parser.rb:512
  def self.new(*a); end

  # in file lib/xmlrpc/parser.rb:595
  def character(data); end

  # in file lib/xmlrpc/parser.rb:550
  def endElement(name); end

  # in file lib/xmlrpc/parser.rb:530
  def startElement(name, attrs=[]); end

end

class XMLRPC::XMLParser::XMLParser # is documented

  # in file lib/xmlrpc/parser.rb:645
  def self.new(); end

end

class XMLRPC::XMLParser::XMLScanStreamParser # is documented

  # in file lib/xmlrpc/parser.rb:749
  def self.new(); end

end

class XMLRPC::XMLParser::XMLScanStreamParser::XMLScanParser # is documented

  # in file lib/xmlrpc/parser.rb:757
  Entities = nil
  # in file lib/xmlrpc/parser.rb:805
  def method_missing(*a); end

  # in file lib/xmlrpc/parser.rb:784
  def on_cdata(str); end

  # in file lib/xmlrpc/parser.rb:780
  def on_chardata(str); end

  # in file lib/xmlrpc/parser.rb:797
  def on_charref(code); end

  # in file lib/xmlrpc/parser.rb:801
  def on_charref_hex(code); end

  # in file lib/xmlrpc/parser.rb:788
  def on_entityref(ent); end

  # in file lib/xmlrpc/parser.rb:773
  def on_stag_end(name); end

  # in file lib/xmlrpc/parser.rb:775
  def on_stag_end_empty(name); end

  # in file lib/xmlrpc/parser.rb:765
  def parse(str); end

end

class XMLRPC::XMLParser::XMLStreamParser # is documented

  # in file lib/xmlrpc/parser.rb:606
  def self.new(); end

end

class XMLRPC::XMLParser::XMLTreeParser # is documented

  # in file lib/xmlrpc/parser.rb:645
  def self.new(); end

end

module XMLRPC::XMLWriter # is documented

  # in file lib/xmlrpc/create.rb:87
  Classes = nil
end

class XMLRPC::XMLWriter::Abstract # is documented

  # in file lib/xmlrpc/create.rb:15
  def ele(name, *children); end

  # in file lib/xmlrpc/create.rb:19
  def tag(name, txt); end

end

class XMLRPC::XMLWriter::Simple # is documented

  # in file lib/xmlrpc/create.rb:31
  def document(*params); end

  # in file lib/xmlrpc/create.rb:27
  def document_to_str(doc); end

  # in file lib/xmlrpc/create.rb:39
  def element(name, attrs, *children); end

  # in file lib/xmlrpc/create.rb:35
  def pi(name, *params); end

  # in file lib/xmlrpc/create.rb:48
  def text(txt); end

end

class XMLRPC::XMLWriter::XMLParser # is documented

  # in file lib/xmlrpc/create.rb:61
  def self.new(); end

  # in file lib/xmlrpc/create.rb:69
  def document(*params); end

  # in file lib/xmlrpc/create.rb:65
  def document_to_str(doc); end

  # in file lib/xmlrpc/create.rb:77
  def element(name, attrs, *children); end

  # in file lib/xmlrpc/create.rb:73
  def pi(name, *params); end

  # in file lib/xmlrpc/create.rb:81
  def text(txt); end

end


class YAML::DBM # is documented

  # in file lib/yaml/dbm.rb:18
  VERSION = nil
  # in file lib/yaml/dbm.rb:70
  def key( keystr ); end

end


Files:       582

Classes:    1124 (   0 undocumented)
Modules:     236 (  11 undocumented)
Constants:   796 ( 519 undocumented)
Attributes: 1009 ( 285 undocumented)
Methods:    5990 (1634 undocumented)

Total:      9155 (2449 undocumented)
 73.25% documented

Elapsed: 65.8s
